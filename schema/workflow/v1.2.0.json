{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"AggregateArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"groupby": {
					"description": "Column to group by",
					"type": "string"
				},
				"operation": {
					"$ref": "#/definitions/FieldAggregateOperation",
					"description": "Aggregate/rollup operation"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"BasicInput": {
			"description": "Single-input, single-output step I/O",
			"properties": {
				"input": {
					"anyOf": [
						{
							"properties": {
								"source": {
									"anyOf": [
										{
											"$ref": "#/definitions/NamedPortBinding"
										},
										{
											"type": "string"
										}
									]
								}
							},
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "Standard step input; single source with default name \"source\".\n\nIf undefined, the default output of the previous step will be used (if available).\nIf no previous step is available, this will remain undefined"
				}
			},
			"type": "object"
		},
		"BinArgs": {
			"properties": {
				"clamped": {
					"description": "If true, values outside of the min/max boundaries will be clamped to those\nboundaries rather than +/-Infinity.",
					"type": "boolean"
				},
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"fixedcount": {
					"description": "Fixed number of bins.\nNote that the bin placements are inclusive of the bottom boundary and exclusive of the top boundary -\nthis means there is always one extra bin for the max value when using fixed count.",
					"type": "number"
				},
				"fixedwidth": {
					"description": "Exact step size between bins",
					"type": "number"
				},
				"max": {
					"description": "Max boundary to categorize values into.\nIf cell values are above this, they will default to +Infinity unless clamped.",
					"type": "number"
				},
				"min": {
					"description": "Min boundary to categorize values into.\nIf cell values are below this, they will default to -Infinity unless clamped.",
					"type": "number"
				},
				"printRange": {
					"description": "If true, the range for each bin will be printed as the cell value instead of the truncated numeric value.\nThis is useful for treating the",
					"type": "boolean"
				},
				"strategy": {
					"$ref": "#/definitions/BinStrategy"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"BinStrategy": {
			"enum": ["auto", "fixed count", "fixed width"],
			"type": "string"
		},
		"BinarizeArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"criteria": {
					"items": {
						"$ref": "#/definitions/Criterion"
					},
					"type": "array"
				},
				"logical": {
					"$ref": "#/definitions/BooleanOperator"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"BooleanArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"operator": {
					"$ref": "#/definitions/BooleanOperator"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"BooleanOperator": {
			"enum": ["and", "nand", "nor", "or", "xor"],
			"type": "string"
		},
		"ConvertArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"delimiter": {
					"type": "string"
				},
				"formatPattern": {
					"type": "string"
				},
				"radix": {
					"description": "Optional radix to use for parsing strings into ints",
					"type": "number"
				},
				"type": {
					"$ref": "#/definitions/ParseType"
				}
			},
			"type": "object"
		},
		"Criterion": {
			"properties": {
				"operator": {
					"enum": [
						"!=",
						"<",
						"<=",
						"=",
						">",
						">=",
						"after",
						"before",
						"contains",
						"ends with",
						"equals",
						"is empty",
						"is false",
						"is not empty",
						"is not equal",
						"is true",
						"regex",
						"starts with"
					],
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/FilterCompareType",
					"description": "Indicates whether the filter should be directly against a value,\nor against the value of another column"
				},
				"value": {
					"description": "Comparison value for the column.\nNot required if the operator is self-defining (e.g., 'is empty')"
				}
			},
			"type": "object"
		},
		"DeriveArgs": {
			"properties": {
				"column1": {
					"description": "Column on the left side of the operation",
					"type": "string"
				},
				"column2": {
					"description": "Column on the right side of the operation",
					"type": "string"
				},
				"operator": {
					"$ref": "#/definitions/MathOperator"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"DualInput": {
			"description": "Dual-input, single-output step I/O",
			"properties": {
				"input": {
					"description": "The inputs that must be bound; \"source\" & \"other\".",
					"properties": {
						"other": {
							"anyOf": [
								{
									"$ref": "#/definitions/NamedPortBinding"
								},
								{
									"type": "string"
								}
							],
							"description": "The secondary input, which must be specified"
						},
						"source": {
							"anyOf": [
								{
									"$ref": "#/definitions/NamedPortBinding"
								},
								{
									"type": "string"
								}
							],
							"description": "The primary input, which must be specified"
						}
					},
					"type": "object"
				}
			},
			"type": "object"
		},
		"EraseArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"value": {
					"description": "A cell value in Arquero"
				}
			},
			"type": "object"
		},
		"FetchArgs": {
			"properties": {
				"autoMax": {
					"description": "Optional autoMax for tables",
					"type": "number"
				},
				"delimiter": {
					"description": "Optional delimiter for csv",
					"type": "string"
				},
				"url": {
					"description": "URL where the csv file is located",
					"type": "string"
				}
			},
			"type": "object"
		},
		"FieldAggregateOperation": {
			"description": "This is the subset of aggregate functions that can operate\non a single field so we don't accommodate additional args.\nSee https://uwdata.github.io/arquero/api/op#aggregate-functions",
			"enum": [
				"any",
				"array_agg",
				"array_agg_distinct",
				"count",
				"distinct",
				"invalid",
				"max",
				"mean",
				"median",
				"min",
				"mode",
				"product",
				"stdev",
				"stdevp",
				"sum",
				"valid",
				"variance"
			],
			"type": "string"
		},
		"FillArgs": {
			"properties": {
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				},
				"value": {
					"description": "Value to fill in the new column"
				}
			},
			"type": "object"
		},
		"FilterArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"criteria": {
					"items": {
						"$ref": "#/definitions/Criterion"
					},
					"type": "array"
				},
				"logical": {
					"$ref": "#/definitions/BooleanOperator"
				}
			},
			"type": "object"
		},
		"FilterCompareType": {
			"enum": ["column", "value"],
			"type": "string"
		},
		"FoldArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"to": {
					"description": "Two-element array of names for the output [key, value]",
					"items": [
						{
							"type": "string"
						},
						{
							"type": "string"
						}
					],
					"maxItems": 2,
					"minItems": 2,
					"type": "array"
				}
			},
			"type": "object"
		},
		"ImputeArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"value": {
					"description": "Value to fill in empty cells"
				}
			},
			"type": "object"
		},
		"InputColumnListArgs": {
			"description": "Base interface for a number of operations that work on a column list.",
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"type": "object"
		},
		"InputColumnRecordArgs": {
			"properties": {
				"columns": {
					"$ref": "#/definitions/Record<string,string>",
					"description": "Map of old column to new column names"
				}
			},
			"type": "object"
		},
		"JoinArgs": {
			"properties": {
				"on": {
					"description": "Column names to join with.\nIf only one is specified, it will use for both tables.\nIf none are specified, all matching column names will be used.",
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"strategy": {
					"$ref": "#/definitions/JoinStrategy"
				}
			},
			"type": "object"
		},
		"JoinStrategy": {
			"enum": [
				"anti join",
				"cross",
				"full outer",
				"inner",
				"left outer",
				"right outer",
				"semi join"
			],
			"type": "string"
		},
		"LookupArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"on": {
					"description": "Column names to join with.\nIf only one is specified, it will use for both tables.\nIf none are specified, all matching column names will be used.",
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"type": "object"
		},
		"MathOperator": {
			"enum": ["*", "+", "-", "/"],
			"type": "string"
		},
		"MergeArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"delimiter": {
					"description": "This is only necessary if mergeStrategy.Concat is used.\nIf it is not supplied, the values are just mashed together.",
					"type": "string"
				},
				"strategy": {
					"$ref": "#/definitions/MergeStrategy"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"MergeStrategy": {
			"enum": ["array", "concat", "first one wins", "last one wins"],
			"type": "string"
		},
		"NamedOutputPortBinding": {
			"description": "An explicit workflow output",
			"properties": {
				"name": {
					"description": "The output table name",
					"type": "string"
				},
				"node": {
					"description": "The id of the node to bind to",
					"type": "string"
				},
				"output": {
					"description": "The named output of the node to bind with. If not defined, this will\nbe the default output \"target\"",
					"type": "string"
				}
			},
			"type": "object"
		},
		"NamedPortBinding": {
			"description": "An explicit step input binding",
			"properties": {
				"node": {
					"description": "The id of the node to bind to",
					"type": "string"
				},
				"output": {
					"description": "The named output of the node to bind with. If not defined, this will\nbe the default output \"target\"",
					"type": "string"
				}
			},
			"type": "object"
		},
		"OnehotArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"prefix": {
					"description": "Optional prefix for the output column names",
					"type": "string"
				}
			},
			"type": "object"
		},
		"OrderbyArgs": {
			"properties": {
				"orders": {
					"description": "List of ordering instructions to apply",
					"items": {
						"$ref": "#/definitions/OrderbyInstruction"
					},
					"type": "array"
				}
			},
			"type": "object"
		},
		"OrderbyInstruction": {
			"properties": {
				"column": {
					"type": "string"
				},
				"direction": {
					"$ref": "#/definitions/SortDirection"
				}
			},
			"type": "object"
		},
		"ParseType": {
			"description": "This is a subset of data types available for parsing operations",
			"enum": ["array", "boolean", "date", "float", "int", "string"],
			"type": "string"
		},
		"Partial<InputColumnListArgs>": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"type": "object"
		},
		"PivotArgs": {
			"properties": {
				"key": {
					"type": "string"
				},
				"operation": {
					"$ref": "#/definitions/FieldAggregateOperation"
				},
				"value": {
					"type": "string"
				}
			},
			"type": "object"
		},
		"RecodeArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"map": {
					"$ref": "#/definitions/Record<any,any>",
					"description": "Mapping of old value to new for the recoding.\nNote that the key must be coercable to a string for map lookup."
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"Record<any,any>": {
			"type": "object"
		},
		"Record<string,string>": {
			"type": "object"
		},
		"RollupArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"operation": {
					"$ref": "#/definitions/FieldAggregateOperation",
					"description": "Aggregate/rollup operation"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"SampleArgs": {
			"properties": {
				"proportion": {
					"description": "If table size is unknown ahead of time, specify a proportion of rows to sample.\nIf size is specified, it will be used instead, otherwise computed from this\nproportion using the table.numRows()",
					"type": "number"
				},
				"size": {
					"description": "Number of rows to sample from the table.\nThis takes precedence over proportion.",
					"type": "number"
				}
			},
			"type": "object"
		},
		"SortDirection": {
			"enum": ["asc", "desc"],
			"type": "string"
		},
		"SpreadArgs": {
			"properties": {
				"columns": {
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"delimiter": {
					"description": "Delimiter to use when converting string cell values into an array with String.split",
					"type": "string"
				},
				"onehot": {
					"description": "Indicates that a onehot-style spread should be performed.\nThis maps all unique cell values to new columns and sets the output cell value to a binary 1/0 based on column match.\nThis is in contrast to the default spread, which just maps array values to column by index.",
					"type": "boolean"
				},
				"to": {
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"type": "object"
		},
		"StepJsonCommon": {
			"description": "Common step properties",
			"properties": {
				"id": {
					"description": "A unique identifier for this step",
					"type": "string"
				}
			},
			"type": "object"
		},
		"UnfoldArgs": {
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			},
			"type": "object"
		},
		"VariadicInput": {
			"description": "Multi-input, single output step I/O",
			"properties": {
				"input": {
					"description": "The step inputs; a required \"source\" and optional, variadic \"others\". If this is a\nstring, it is used to bind the primary input.",
					"properties": {
						"others": {
							"description": "The variadic secondary inputs",
							"items": {
								"anyOf": [
									{
										"$ref": "#/definitions/NamedPortBinding"
									},
									{
										"type": "string"
									}
								]
							},
							"type": "array"
						},
						"source": {
							"anyOf": [
								{
									"$ref": "#/definitions/NamedPortBinding"
								},
								{
									"type": "string"
								}
							],
							"description": "The primary input"
						}
					},
					"type": "object"
				}
			},
			"type": "object"
		},
		"WindowArgs": {
			"properties": {
				"column": {
					"description": "Name of the input column for columnnar operations.",
					"type": "string"
				},
				"operation": {
					"$ref": "#/definitions/WindowFunction"
				},
				"to": {
					"description": "Name of the output column to receive the operation's result.",
					"type": "string"
				}
			},
			"type": "object"
		},
		"WindowFunction": {
			"description": "These are operations that perform windowed compute.\nSee https://uwdata.github.io/arquero/api/op#window-functions",
			"enum": [
				"cume_dist",
				"fill_down",
				"fill_up",
				"first_value",
				"last_value",
				"percent_rank",
				"rank",
				"row_number"
			],
			"type": "string"
		}
	},
	"description": "The root wrangling workflow specification. (Used for generating JSON Schema)",
	"properties": {
		"description": {
			"description": "A user-friendly description of the specification",
			"type": "string"
		},
		"input": {
			"description": "A list of input names that are expected to be provided in addition to the workflow steps",
			"items": {
				"type": "string"
			},
			"type": "array"
		},
		"name": {
			"description": "The name of the specification",
			"type": "string"
		},
		"output": {
			"description": "The output bindings",
			"items": {
				"anyOf": [
					{
						"$ref": "#/definitions/NamedOutputPortBinding"
					},
					{
						"type": "string"
					}
				]
			},
			"type": "array"
		},
		"steps": {
			"description": "The workflow steps",
			"items": {
				"anyOf": [
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/AggregateArgs"
									},
									"verb": {
										"enum": ["aggregate"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/BinArgs"
									},
									"verb": {
										"enum": ["bin"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/BinarizeArgs"
									},
									"verb": {
										"enum": ["binarize"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/BooleanArgs"
									},
									"verb": {
										"enum": ["boolean"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["concat"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/VariadicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/ConvertArgs"
									},
									"verb": {
										"enum": ["convert"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/Partial<InputColumnListArgs>"
									},
									"verb": {
										"enum": ["dedupe"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/DeriveArgs"
									},
									"verb": {
										"enum": ["derive"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["difference"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/VariadicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/EraseArgs"
									},
									"verb": {
										"enum": ["erase"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/FetchArgs"
									},
									"verb": {
										"enum": ["fetch"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/FillArgs"
									},
									"verb": {
										"enum": ["fill"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/FilterArgs"
									},
									"verb": {
										"enum": ["filter"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/FoldArgs"
									},
									"verb": {
										"enum": ["fold"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/InputColumnListArgs"
									},
									"verb": {
										"enum": ["groupby"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/ImputeArgs"
									},
									"verb": {
										"enum": ["impute"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["intersect"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/VariadicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/JoinArgs"
									},
									"verb": {
										"enum": ["join"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/DualInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/LookupArgs"
									},
									"verb": {
										"enum": ["lookup"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/DualInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/MergeArgs"
									},
									"verb": {
										"enum": ["merge"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/OnehotArgs"
									},
									"verb": {
										"enum": ["onehot"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/OrderbyArgs"
									},
									"verb": {
										"enum": ["orderby"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/PivotArgs"
									},
									"verb": {
										"enum": ["pivot"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/RecodeArgs"
									},
									"verb": {
										"enum": ["recode"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/InputColumnRecordArgs"
									},
									"verb": {
										"enum": ["rename"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/RollupArgs"
									},
									"verb": {
										"enum": ["rollup"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/SampleArgs"
									},
									"verb": {
										"enum": ["sample"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/InputColumnListArgs"
									},
									"verb": {
										"enum": ["select"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/SpreadArgs"
									},
									"verb": {
										"enum": ["spread"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/UnfoldArgs"
									},
									"verb": {
										"enum": ["unfold"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["ungroup"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["union"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/VariadicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"verb": {
										"enum": ["unorder"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/InputColumnListArgs"
									},
									"verb": {
										"enum": ["unroll"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					},
					{
						"allOf": [
							{
								"$ref": "#/definitions/StepJsonCommon"
							},
							{
								"properties": {
									"args": {
										"$ref": "#/definitions/WindowArgs"
									},
									"verb": {
										"enum": ["window"],
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"$ref": "#/definitions/BasicInput"
							}
						]
					}
				],
				"description": "Specification for step items"
			},
			"type": "array"
		}
	},
	"type": "object"
}
