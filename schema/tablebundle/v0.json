{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ResourceSchema": {
            "description": "Parent class for any resource type understood by the system.\nAny object type that extends from Resouce is expected to have a standalone schema published.\nFor project state, this can be left as generic as possible for now.",
            "properties": {
                "$schema": {
                    "description": "The JSON schema for this resource.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the named resource.",
                    "type": "string"
                },
                "homepage": {
                    "description": "URL to a public webpage that describes this resource.",
                    "type": "string"
                },
                "license": {
                    "description": "SPDX license string.\nhttps://spdx.org/licenses/",
                    "type": "string"
                },
                "name": {
                    "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
                    "type": "string"
                },
                "path": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "URI-compliant path to the resource (local or remote).\nIf array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables).\nURI-compliant path to the referenced resource (local or remote)."
                },
                "profile": {
                    "description": "Defines the resource type.\nKnown resource types should have accommpanying processors and rendering components.\nUnknown resource types can be interrogated to determine if the format is understandable by an existing component.\nNote that this could be inferred from $schema, but a simple string here is easier to deal with in code.",
                    "type": "string"
                },
                "rel": {
                    "description": "The relationship of this resource to the parent resource.\n\nNote: If the resource is a profile-free reference object (e.g.\n{ \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n\nThen the relationship is _external_ the target resource and should not be persisted\nin the object\n)",
                    "type": "string"
                },
                "sources": {
                    "description": "List of resources that underly this resource.\nThis gives us the ability to create hierarchical or linked structures\nto represent complex combinations.\nFor example, a parent resource can have source tables, a workflow, and a table schema that all combine\nto create a fully-realized, strongly typed, and transformed output table.\nEntire Resource objects may be embedded here, or a string path to the Resource definition JSON.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ResourceSchema"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "title": {
                    "description": "Friendly name of the resource. Used for display only.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "description": "A table bundle encapsulates table-specific resources into a single resource with a\nprescribed workflow.\n\nA tablebundle requires a `source` entry with rel=\"input\" for the source table.\nA tablebundle may also include `source` entries with rel=\"codebook\" and rel=\"workflow\"\nfor interpretation and processing of the source data table.",
    "properties": {
        "$schema": {
            "description": "The JSON schema for this resource.",
            "type": "string"
        },
        "description": {
            "description": "Description of the named resource.",
            "type": "string"
        },
        "homepage": {
            "description": "URL to a public webpage that describes this resource.",
            "type": "string"
        },
        "license": {
            "description": "SPDX license string.\nhttps://spdx.org/licenses/",
            "type": "string"
        },
        "name": {
            "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
            "type": "string"
        },
        "path": {
            "anyOf": [
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                {
                    "type": "string"
                }
            ],
            "description": "URI-compliant path to the resource (local or remote).\nIf array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables).\nURI-compliant path to the referenced resource (local or remote)."
        },
        "profile": {
            "description": "Defines the resource type.\nKnown resource types should have accommpanying processors and rendering components.\nUnknown resource types can be interrogated to determine if the format is understandable by an existing component.\nNote that this could be inferred from $schema, but a simple string here is easier to deal with in code.",
            "enum": [
                "tablebundle"
            ],
            "type": "string"
        },
        "rel": {
            "description": "The relationship of this resource to the parent resource.\n\nNote: If the resource is a profile-free reference object (e.g.\n{ \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n\nThen the relationship is _external_ the target resource and should not be persisted\nin the object\n)",
            "type": "string"
        },
        "sources": {
            "description": "List of resources that underly this resource.\nThis gives us the ability to create hierarchical or linked structures\nto represent complex combinations.\nFor example, a parent resource can have source tables, a workflow, and a table schema that all combine\nto create a fully-realized, strongly typed, and transformed output table.\nEntire Resource objects may be embedded here, or a string path to the Resource definition JSON.",
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/ResourceSchema"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "type": "array"
        },
        "title": {
            "description": "Friendly name of the resource. Used for display only.",
            "type": "string"
        }
    },
    "type": "object"
}

