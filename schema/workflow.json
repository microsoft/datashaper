{
    "$ref": "#/definitions/WorkflowSchema",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AggregateArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "groupby": {
                    "description": "Column to group by",
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/FieldAggregateOperation",
                    "description": "Aggregate/rollup operation"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BasicInput": {
            "description": "Single-input, single-output step I/O",
            "properties": {
                "input": {
                    "anyOf": [
                        {
                            "properties": {
                                "source": {
                                    "$ref": "#/definitions/WorkflowInput"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Standard step input; single source with default name \"source\".\n\nIf undefined, the default output of the previous step will be used (if available).\nIf no previous step is available, this will remain undefined"
                }
            },
            "type": "object"
        },
        "BinArgs": {
            "properties": {
                "clamped": {
                    "description": "If true, values outside of the min/max boundaries will be clamped to those\nboundaries rather than +/-Infinity.",
                    "type": "boolean"
                },
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "fixedcount": {
                    "description": "Fixed number of bins.\nNote that the bin placements are inclusive of the bottom boundary and exclusive of the top boundary -\nthis means there is always one extra bin for the max value when using fixed count.",
                    "type": "number"
                },
                "fixedwidth": {
                    "description": "Exact step size between bins",
                    "type": "number"
                },
                "max": {
                    "description": "Max boundary to categorize values into.\nIf cell values are above this, they will default to +Infinity unless clamped.",
                    "type": "number"
                },
                "min": {
                    "description": "Min boundary to categorize values into.\nIf cell values are below this, they will default to -Infinity unless clamped.",
                    "type": "number"
                },
                "nice": {
                    "description": "Indicates whether bins should be rounded in a readable human-friendly way.",
                    "type": "boolean"
                },
                "printRange": {
                    "description": "If true, the range for each bin will be printed as the cell value instead of the truncated numeric value.",
                    "type": "boolean"
                },
                "strategy": {
                    "$ref": "#/definitions/BinStrategy",
                    "description": "Binning technique to use."
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BinStrategy": {
            "description": "Describes the binning technique to use.\nSee numpy for detailed definitions: https://numpy.org/doc/stable/reference/generated/numpy.histogram_bin_edges.html",
            "enum": [
                "auto",
                "doane",
                "fd",
                "fixed count",
                "fixed width",
                "rice",
                "scott",
                "sqrt",
                "sturges"
            ],
            "type": "string"
        },
        "BinarizeArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "criteria": {
                    "$ref": "#/definitions/Criteria",
                    "description": "Filter criteria to apply to the column."
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BooleanArgs": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "operator": {
                    "$ref": "#/definitions/BooleanOperator",
                    "description": "Boolean comparison type to apply across the list of input column values"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BooleanOperator": {
            "enum": [
                "and",
                "nand",
                "nor",
                "or",
                "xnor",
                "xor"
            ],
            "type": "string"
        },
        "CodebookSchema": {
            "description": "This contains all of the field-level details for interpreting a dataset,\nincluding data types, mapping, and metadata.\nNote that with persisted metadata and field examples, a dataset can often be visualized\nand described to the user without actually loading the source file.\nresource profile: 'codebook'",
            "properties": {
                "$schema": {
                    "description": "The JSON schema for this resource.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the named resource.",
                    "type": "string"
                },
                "fields": {
                    "description": "The per-field encodings. These contain interpretive information about the data.",
                    "items": {
                        "$ref": "#/definitions/Field"
                    },
                    "type": "array"
                },
                "homepage": {
                    "description": "URL to a public webpage that describes this resource.",
                    "type": "string"
                },
                "license": {
                    "description": "SPDX license string.\nhttps://spdx.org/licenses/",
                    "type": "string"
                },
                "name": {
                    "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
                    "type": "string"
                },
                "path": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "URI-compliant path to the resource (local or remote).\nIf array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables).\nURI-compliant path to the referenced resource (local or remote)."
                },
                "profile": {
                    "const": "codebook",
                    "description": "Defines the resource type.\nKnown resource types should have accompanying processors and rendering components.\nUnknown resource types can be interrogated to determine if the format is understandable by an existing component.\nNote that this could be inferred from $schema, but a simple string here is easier to deal with in code.",
                    "type": "string"
                },
                "rel": {
                    "description": "The relationship of this resource to the parent resource.\n\nNote: If the resource is a profile-free reference object (e.g.\n{ \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n\nThen the relationship is _external_ the target resource and should not be persisted\nin the object\n)",
                    "type": "string"
                },
                "sources": {
                    "description": "List of resources that underlie this resource.\nThis gives us the ability to create hierarchical or linked structures\nto represent complex combinations.\nFor example, a parent resource can have source tables, a workflow, and a table schema that all combine\nto create a fully-realized, strongly typed, and transformed output table.\nEntire Resource objects may be embedded here, or a string path to the Resource definition JSON.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ResourceSchema"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "title": {
                    "description": "Friendly name of the resource. Used for display only.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CodebookStrategy": {
            "enum": [
                "data type and mapping",
                "data type only",
                "mapping only"
            ],
            "type": "string"
        },
        "Constraints": {
            "description": "Validation constraints for a field.",
            "properties": {
                "enum": {
                    "description": "Strict list of allowed values in the column.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "maxLength": {
                    "description": "For strings or arrays, this is the maximum allowed length of values.",
                    "type": "number"
                },
                "maximum": {
                    "description": "For numbers or dates, this is the maximum allowed value.",
                    "type": "number"
                },
                "minLength": {
                    "description": "For strings or arrays, this is the minimum allowed length of values.",
                    "type": "number"
                },
                "minimum": {
                    "description": "For numbers or dates, this is the minimum allowed value.",
                    "type": "number"
                },
                "pattern": {
                    "description": "RegExp pattern that string values must match.",
                    "type": "string"
                },
                "required": {
                    "description": "Indicates that this field is required (not nullable).",
                    "type": "boolean"
                },
                "unique": {
                    "description": "Indicates that every value in this column must be unique.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConvertArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "delimiter": {
                    "description": "Delimiter to use for identifying decimals when converting strings to numbers.",
                    "type": "string"
                },
                "formatPattern": {
                    "description": "Format string to use when converting strings to dates. Follows strptime format.",
                    "type": "string"
                },
                "radix": {
                    "description": "Radix to use for parsing strings into ints",
                    "type": "number"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/ParseType",
                    "description": "Output type to convert the column values to."
                }
            },
            "type": "object"
        },
        "CopyArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Criteria": {
            "properties": {
                "operator": {
                    "description": "Filter operator to execute. Note the correct operator for the column data type must be used.",
                    "enum": [
                        "!=",
                        "<",
                        "<=",
                        "=",
                        ">",
                        ">=",
                        "after",
                        "before",
                        "contains",
                        "ends with",
                        "equals",
                        "is empty",
                        "is false",
                        "is not empty",
                        "is not equal",
                        "is true",
                        "regex",
                        "starts with"
                    ],
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/FilterCompareType",
                    "description": "Indicates whether the filter should be directly against a value,\nor against the value of another column"
                },
                "value": {
                    "description": "Comparison value for the column.\nNot required if the operator is self-defining (e.g., 'is empty')"
                }
            },
            "type": "object"
        },
        "DataType": {
            "description": "Explicit data type of the value (i.e., for a column or property).\nTODO: clarify/update null/undefined",
            "enum": [
                "array",
                "boolean",
                "date",
                "datetime",
                "integer",
                "null",
                "number",
                "object",
                "string",
                "time",
                "undefined",
                "unknown"
            ],
            "type": "string"
        },
        "DeriveArgs": {
            "properties": {
                "column1": {
                    "description": "Column on the left side of the operation",
                    "type": "string"
                },
                "column2": {
                    "description": "Column on the right side of the operation",
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/MathOperator",
                    "description": "Math operation to perform row-by-row on the two columns"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DestructureArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "preserveSource": {
                    "description": "Keep the original columns (default is to remove source columns).",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DualInput": {
            "description": "Dual-input, single-output step I/O",
            "properties": {
                "input": {
                    "description": "The inputs that must be bound; \"source\" & \"other\".",
                    "properties": {
                        "other": {
                            "$ref": "#/definitions/WorkflowInput",
                            "description": "The secondary input, which must be specified"
                        },
                        "source": {
                            "$ref": "#/definitions/WorkflowInput",
                            "description": "The primary input, which must be specified"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "EncodeDecodeArgs": {
            "properties": {
                "codebook": {
                    "$ref": "#/definitions/CodebookSchema",
                    "description": "Codebook to apply to the table."
                },
                "strategy": {
                    "$ref": "#/definitions/CodebookStrategy",
                    "description": "Strategy for applying the codebook to the table."
                }
            },
            "type": "object"
        },
        "EraseArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "value": {
                    "description": "Value to match and erase (set to undefined) in the column"
                }
            },
            "type": "object"
        },
        "Field": {
            "description": "Contains the full schema definition and metadata for a data field (usually a table column).\nThis includes the required data type, various data nature and rendering properties, potential\nvalidation rules, and mappings from a data dictionary.",
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/Constraints",
                    "description": "Validation constraints for the values in the field to adhere to."
                },
                "derivedFrom": {
                    "description": "Provenance hints for the source of this field.\nFor example, categorical fields are often onehot encoded into new binary columns,\nthis would link back to the original categorical.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the named resource.",
                    "type": "string"
                },
                "example": {
                    "description": "Single example of a valid data value for the field."
                },
                "exclude": {
                    "description": "Indicates that this field from the dataset should be excluded from computations and display.",
                    "type": "boolean"
                },
                "format": {
                    "description": "Describes the semantic or parsing format for the values.\nThis is based on JSONSchema. See https://json-schema.org/draft/2020-12/json-schema-validation.html#name-vocabularies-for-semantic-c\nTODO: JSONSchema is pretty flexible here, and we should align with it. For example, there are standard string (uri, email, ip-address, etc.)\nthat define known formats. However, you can also link out to any arbitrary schema that validates a data value.\nJSONSchema also uses the format field to describe date and time notation. Because dates are not a valid JSON type,\nthey are represented as type = string, but format = date, time, date-time, or duration.\nWe use the type in running code, so it seems appropriate to keep the expanded list, but maybe this can contain parsing\ninstructions (e.g., a pattern) for converting date/time strings into values.\nhttps://json-schema.org/draft/2020-12/json-schema-validation.html#name-defined-formats",
                    "type": "string"
                },
                "inverse": {
                    "description": "Indicates that values are mapped inverse to typical expectation, and may need to be displayed in the opposite direction.\nClosely related to nature, particular for categorical ordinal values.",
                    "type": "boolean"
                },
                "mapping": {
                    "$ref": "#/definitions/Record<any,any>",
                    "description": "This provides a mapping between cell values and some other value.\nMost commonly this is the core \"data dictionary\", whereby cell values are stored as numeric categories,\nand the dictionary defines textual descriptions of the actual meaning.\nIf numeric, the keys are usually categorical ordinal or nominal.\nString keys are often commonly used (for example, medical data often use short alphanumeric codes to represent diagnostic strings)."
                },
                "name": {
                    "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
                    "type": "string"
                },
                "nature": {
                    "$ref": "#/definitions/VariableNature",
                    "description": "Data nature. This is primarily applicable to numbers, which have different characters that define how we should display them in charts.\ndefault: continuous\nTODO: there is a large block of nature-related content in CauseDis. is some of this transient application state? how much do we need to carry in a schema?"
                },
                "subtype": {
                    "$ref": "#/definitions/DataType",
                    "description": "If the type is an array, this is the type of the array elements."
                },
                "tags": {
                    "description": "Optional descriptive tags for the field.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "Friendly name of the resource. Used for display only.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/DataType",
                    "description": "Strict type of the field. Note that columns may not mix types in their rows for most of the data formats we use.\nDefault: 'string'"
                },
                "unit": {
                    "description": "QUDT code for the variable unit (i.e., meters, pounds, etc.).\nhttps://qudt.org/2.1/vocab/unit",
                    "type": "string"
                },
                "unitDescription": {
                    "description": "Description of the unit for friendly display.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FieldAggregateOperation": {
            "description": "This is the subset of aggregate functions that can operate\non a single field so we don't accommodate additional args.\nSee https://uwdata.github.io/arquero/api/op#aggregate-functions",
            "enum": [
                "any",
                "array_agg",
                "array_agg_distinct",
                "count",
                "distinct",
                "invalid",
                "max",
                "mean",
                "median",
                "min",
                "mode",
                "product",
                "stdev",
                "stdevp",
                "sum",
                "valid",
                "variance"
            ],
            "type": "string"
        },
        "FillArgs": {
            "properties": {
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                },
                "value": {
                    "description": "Value to fill in the new column. All rows will receive this value."
                }
            },
            "type": "object"
        },
        "FilterArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "criteria": {
                    "$ref": "#/definitions/Criteria",
                    "description": "Filter criteria to apply to the column."
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                }
            },
            "type": "object"
        },
        "FilterCompareType": {
            "description": "Indicates the comparison type used for a filter operation.\nThis is done on a row-by-row basis.",
            "enum": [
                "column",
                "value"
            ],
            "type": "string"
        },
        "FoldArgs": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "to": {
                    "description": "Two-element array of names for the output [key, value]",
                    "items": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ImputeArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "value": {
                    "description": "Value to fill in empty cells"
                }
            },
            "type": "object"
        },
        "InputColumnArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                }
            },
            "type": "object"
        },
        "InputColumnListArgs": {
            "description": "Base interface for a number of operations that work on a column list.",
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "InputColumnRecordArgs": {
            "properties": {
                "columns": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Map of old column to new column names"
                }
            },
            "type": "object"
        },
        "InputKeyValueArgs": {
            "properties": {
                "key": {
                    "description": "Key column for the operation",
                    "type": "string"
                },
                "value": {
                    "description": "Value column for the operation",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JoinArgs": {
            "properties": {
                "on": {
                    "description": "Column names to join with.\nIf only one is specified, it will use for both tables.\nIf none are specified, all matching column names will be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "strategy": {
                    "$ref": "#/definitions/JoinStrategy",
                    "description": "Type of join to perform"
                }
            },
            "type": "object"
        },
        "JoinStrategy": {
            "enum": [
                "anti join",
                "cross",
                "full outer",
                "inner",
                "left outer",
                "right outer",
                "semi join"
            ],
            "type": "string"
        },
        "LookupArgs": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "on": {
                    "description": "Column names to join with.\nIf only one is specified, it will use for both tables.\nIf none are specified, all matching column names will be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MathOperator": {
            "enum": [
                "*",
                "+",
                "-",
                "/"
            ],
            "type": "string"
        },
        "MergeArgs": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "delimiter": {
                    "description": "Delimiter to use when merging columns into a string.\nThis is only necessary if MergeStrategy.Concat is used.\nIf it is not supplied, the values are just mashed together.",
                    "type": "string"
                },
                "preserveSource": {
                    "description": "Keep the original columns (default is to remove source columns).",
                    "type": "boolean"
                },
                "strategy": {
                    "$ref": "#/definitions/MergeStrategy",
                    "description": "Strategy to use for merging the input columns"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MergeStrategy": {
            "enum": [
                "array",
                "concat",
                "first one wins",
                "last one wins"
            ],
            "type": "string"
        },
        "OnehotArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "prefix": {
                    "description": "Optional prefixes for the output column names",
                    "type": "string"
                },
                "preserveSource": {
                    "description": "Keep the original columns (default is to remove source columns).",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OrderbyArgs": {
            "properties": {
                "orders": {
                    "description": "List of ordering instructions to apply",
                    "items": {
                        "$ref": "#/definitions/OrderbyInstruction"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OrderbyInstruction": {
            "properties": {
                "column": {
                    "description": "Name of the column to order by",
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/SortDirection",
                    "description": "Direction to order by"
                }
            },
            "type": "object"
        },
        "ParseType": {
            "description": "This is a subset of data types available for parsing operations.",
            "enum": [
                "array",
                "boolean",
                "date",
                "float",
                "int",
                "string"
            ],
            "type": "string"
        },
        "Partial<InputColumnListArgs>": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PivotArgs": {
            "properties": {
                "key": {
                    "description": "Key column for the operation",
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/FieldAggregateOperation",
                    "description": "Aggregate/rollup operation to perform when doing the pivot."
                },
                "value": {
                    "description": "Value column for the operation",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PrintArgs": {
            "properties": {
                "limit": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RecodeArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "mapping": {
                    "$ref": "#/definitions/Record<any,any>",
                    "description": "Mapping of old value to new for the recoding.\nNote that the key must be coercible to a string for map lookup."
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Record<any,any>": {
            "type": "object"
        },
        "Record<string,string>": {
            "type": "object"
        },
        "ResourceSchema": {
            "description": "Parent class for any resource type understood by the system.\nAny object type that extends from Resource is expected to have a standalone schema published.\nFor project state, this can be left as generic as possible for now.",
            "properties": {
                "$schema": {
                    "description": "The JSON schema for this resource.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the named resource.",
                    "type": "string"
                },
                "homepage": {
                    "description": "URL to a public webpage that describes this resource.",
                    "type": "string"
                },
                "license": {
                    "description": "SPDX license string.\nhttps://spdx.org/licenses/",
                    "type": "string"
                },
                "name": {
                    "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
                    "type": "string"
                },
                "path": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "URI-compliant path to the resource (local or remote).\nIf array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables).\nURI-compliant path to the referenced resource (local or remote)."
                },
                "profile": {
                    "description": "Defines the resource type.\nKnown resource types should have accompanying processors and rendering components.\nUnknown resource types can be interrogated to determine if the format is understandable by an existing component.\nNote that this could be inferred from $schema, but a simple string here is easier to deal with in code.",
                    "type": "string"
                },
                "rel": {
                    "description": "The relationship of this resource to the parent resource.\n\nNote: If the resource is a profile-free reference object (e.g.\n{ \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n\nThen the relationship is _external_ the target resource and should not be persisted\nin the object\n)",
                    "type": "string"
                },
                "sources": {
                    "description": "List of resources that underlie this resource.\nThis gives us the ability to create hierarchical or linked structures\nto represent complex combinations.\nFor example, a parent resource can have source tables, a workflow, and a table schema that all combine\nto create a fully-realized, strongly typed, and transformed output table.\nEntire Resource objects may be embedded here, or a string path to the Resource definition JSON.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ResourceSchema"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "title": {
                    "description": "Friendly name of the resource. Used for display only.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RollupArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "operation": {
                    "$ref": "#/definitions/FieldAggregateOperation",
                    "description": "Aggregate/rollup operation"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SampleArgs": {
            "properties": {
                "emitRemainder": {
                    "description": "Whether to preserve and emit the non-sampled records via the 'remainder' output port.",
                    "type": "boolean"
                },
                "proportion": {
                    "description": "If table size is unknown ahead of time, specify a proportion of rows to sample.\nIf size is specified, it will be used instead, otherwise computed from this\nproportion using the table.numRows()",
                    "type": "number"
                },
                "seed": {
                    "description": "The randomization seed to use for sampling to ensure stable sampling.",
                    "type": "number"
                },
                "size": {
                    "description": "Number of rows to sample from the table.\nThis takes precedence over proportion.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "SortDirection": {
            "enum": [
                "asc",
                "desc"
            ],
            "type": "string"
        },
        "SpreadArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "delimiter": {
                    "description": "Delimiter to use when converting string cell values into an array with String.split",
                    "type": "string"
                },
                "onehot": {
                    "description": "Indicates that a onehot-style spread should be performed.\nThis maps all unique cell values to new columns and sets the output cell value to a binary 1/0 based on column match.\nThis is in contrast to the default spread, which just maps array values to column by index.",
                    "type": "boolean"
                },
                "preserveSource": {
                    "description": "Keep the original columns (default is to remove source columns).",
                    "type": "boolean"
                },
                "to": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Step": {
            "anyOf": [
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/AggregateArgs"
                                },
                                "verb": {
                                    "const": "aggregate",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/BinArgs"
                                },
                                "verb": {
                                    "const": "bin",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/BinarizeArgs"
                                },
                                "verb": {
                                    "const": "binarize",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/BooleanArgs"
                                },
                                "verb": {
                                    "const": "boolean",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "concat",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/VariadicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/ConvertArgs"
                                },
                                "verb": {
                                    "const": "convert",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/CopyArgs"
                                },
                                "verb": {
                                    "const": "copy",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/Partial<InputColumnListArgs>"
                                },
                                "verb": {
                                    "const": "dedupe",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/DeriveArgs"
                                },
                                "verb": {
                                    "const": "derive",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "difference",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/VariadicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/EncodeDecodeArgs"
                                },
                                "verb": {
                                    "const": "decode",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputColumnListArgs"
                                },
                                "verb": {
                                    "const": "drop",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/EncodeDecodeArgs"
                                },
                                "verb": {
                                    "const": "encode",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/EraseArgs"
                                },
                                "verb": {
                                    "const": "erase",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/FillArgs"
                                },
                                "verb": {
                                    "const": "fill",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/FilterArgs"
                                },
                                "verb": {
                                    "const": "filter",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/FoldArgs"
                                },
                                "verb": {
                                    "const": "fold",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputColumnListArgs"
                                },
                                "verb": {
                                    "const": "groupby",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/ImputeArgs"
                                },
                                "verb": {
                                    "const": "impute",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "intersect",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/VariadicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/JoinArgs"
                                },
                                "verb": {
                                    "const": "join",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/DualInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/LookupArgs"
                                },
                                "verb": {
                                    "const": "lookup",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/DualInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/MergeArgs"
                                },
                                "verb": {
                                    "const": "merge",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/PrintArgs"
                                },
                                "verb": {
                                    "const": "print",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/OnehotArgs"
                                },
                                "verb": {
                                    "const": "onehot",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/OrderbyArgs"
                                },
                                "verb": {
                                    "const": "orderby",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/PivotArgs"
                                },
                                "verb": {
                                    "const": "pivot",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/RecodeArgs"
                                },
                                "verb": {
                                    "const": "recode",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputColumnRecordArgs"
                                },
                                "verb": {
                                    "const": "rename",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/RollupArgs"
                                },
                                "verb": {
                                    "const": "rollup",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/SampleArgs"
                                },
                                "verb": {
                                    "const": "sample",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputColumnListArgs"
                                },
                                "verb": {
                                    "const": "select",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/SpreadArgs"
                                },
                                "verb": {
                                    "const": "spread",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/DestructureArgs"
                                },
                                "verb": {
                                    "const": "destructure",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/StringsReplaceArgs"
                                },
                                "verb": {
                                    "const": "strings.replace",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/StringsArgs"
                                },
                                "verb": {
                                    "const": "strings.lower",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/StringsArgs"
                                },
                                "verb": {
                                    "const": "strings.upper",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputKeyValueArgs"
                                },
                                "verb": {
                                    "const": "unfold",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "ungroup",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/UnhotArgs"
                                },
                                "verb": {
                                    "const": "unhot",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "union",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/VariadicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "verb": {
                                    "const": "unorder",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/InputColumnArgs"
                                },
                                "verb": {
                                    "const": "unroll",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/WindowArgs"
                                },
                                "verb": {
                                    "const": "window",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {
                                    "$ref": "#/definitions/WorkflowArgs"
                                },
                                "verb": {
                                    "const": "workflow",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/BasicInput"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "$ref": "#/definitions/StepJsonCommon"
                        },
                        {
                            "properties": {
                                "args": {},
                                "verb": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/UnknownInput"
                        }
                    ]
                }
            ],
            "description": "Specification for step items"
        },
        "StepJsonCommon": {
            "description": "Common step properties",
            "properties": {
                "id": {
                    "description": "A unique identifier for this step",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StringsArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StringsReplaceArgs": {
            "properties": {
                "caseInsensitive": {
                    "type": "boolean"
                },
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "globalSearch": {
                    "type": "boolean"
                },
                "pattern": {
                    "type": "string"
                },
                "replacement": {
                    "type": "string"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnhotArgs": {
            "properties": {
                "columns": {
                    "description": "List of input columns for operations that work across multiple columns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "prefix": {
                    "type": "string"
                },
                "preserveSource": {
                    "description": "Keep the original columns (default is to remove source columns).",
                    "type": "boolean"
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnknownInput": {
            "properties": {
                "input": {
                    "anyOf": [
                        {
                            "properties": {
                                "step": {
                                    "description": "The Id of the step to which the input is bound",
                                    "type": "string"
                                },
                                "table": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": {
                                "anyOf": [
                                    {
                                        "properties": {
                                            "step": {
                                                "description": "The Id of the step to which the input is bound",
                                                "type": "string"
                                            },
                                            "table": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/definitions/WorkflowInput"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "properties": {
                                "others": {
                                    "description": "Possible variadic input",
                                    "items": {
                                        "$ref": "#/definitions/WorkflowInput"
                                    },
                                    "type": "array"
                                },
                                "source": {
                                    "$ref": "#/definitions/WorkflowInput",
                                    "description": "Possible main input"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "VariableNature": {
            "description": "Describes the semantic shape of a variable.\nThis has particular effect on how we display and compare data,\nsuch as using line charts for continuous versus bar charts for categorical.\nThis mostly applies to numeric variables, but strings for instance can be categorical.",
            "enum": [
                "binary",
                "continuous",
                "discrete",
                "nominal",
                "ordinal"
            ],
            "type": "string"
        },
        "VariadicInput": {
            "description": "Multi-input, single output step I/O",
            "properties": {
                "input": {
                    "description": "The step inputs; a required \"source\" and optional, variadic \"others\". If this is a\nstring, it is used to bind the primary input.",
                    "properties": {
                        "others": {
                            "description": "The variadic secondary inputs",
                            "items": {
                                "$ref": "#/definitions/WorkflowInput"
                            },
                            "type": "array"
                        },
                        "source": {
                            "$ref": "#/definitions/WorkflowInput",
                            "description": "The primary input"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "WindowArgs": {
            "properties": {
                "column": {
                    "description": "Name of the input column for columnar operations",
                    "type": "string"
                },
                "dataType": {
                    "$ref": "#/definitions/DataType",
                    "description": "Expected data type for values in the column"
                },
                "operation": {
                    "$ref": "#/definitions/WindowFunction",
                    "description": "Window function to apply to the column."
                },
                "to": {
                    "description": "Name of the output column to receive the operation's result.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "WindowFunction": {
            "description": "These are operations that perform windowed compute.\nSee https://uwdata.github.io/arquero/api/op#window-functions",
            "enum": [
                "cume_dist",
                "fill_down",
                "fill_up",
                "first_value",
                "last_value",
                "percent_rank",
                "rank",
                "row_number",
                "uuid"
            ],
            "type": "string"
        },
        "WorkflowArgs": {
            "properties": {
                "workflow": {
                    "$ref": "#/definitions/WorkflowSchema",
                    "description": "The workflow configuration."
                }
            },
            "type": "object"
        },
        "WorkflowInput": {
            "anyOf": [
                {
                    "properties": {
                        "step": {
                            "description": "The Id of the step to which the input is bound",
                            "type": "string"
                        },
                        "table": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ]
        },
        "WorkflowSchema": {
            "description": "The root wrangling workflow specification.\nresource profile: 'workflow'",
            "properties": {
                "$schema": {
                    "description": "The JSON schema for this resource.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the named resource.",
                    "type": "string"
                },
                "homepage": {
                    "description": "URL to a public webpage that describes this resource.",
                    "type": "string"
                },
                "input": {
                    "description": "A list of input names that are expected to be provided in addition to the workflow steps",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "description": "SPDX license string.\nhttps://spdx.org/licenses/",
                    "type": "string"
                },
                "name": {
                    "description": "User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible.\nThis should be editable, just like any other filename on a file system.",
                    "type": "string"
                },
                "path": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "URI-compliant path to the resource (local or remote).\nIf array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables).\nURI-compliant path to the referenced resource (local or remote)."
                },
                "profile": {
                    "const": "workflow",
                    "description": "Defines the resource type.\nKnown resource types should have accompanying processors and rendering components.\nUnknown resource types can be interrogated to determine if the format is understandable by an existing component.\nNote that this could be inferred from $schema, but a simple string here is easier to deal with in code.",
                    "type": "string"
                },
                "rel": {
                    "description": "The relationship of this resource to the parent resource.\n\nNote: If the resource is a profile-free reference object (e.g.\n{ \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n\nThen the relationship is _external_ the target resource and should not be persisted\nin the object\n)",
                    "type": "string"
                },
                "sources": {
                    "description": "List of resources that underlie this resource.\nThis gives us the ability to create hierarchical or linked structures\nto represent complex combinations.\nFor example, a parent resource can have source tables, a workflow, and a table schema that all combine\nto create a fully-realized, strongly typed, and transformed output table.\nEntire Resource objects may be embedded here, or a string path to the Resource definition JSON.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ResourceSchema"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "steps": {
                    "description": "The workflow steps",
                    "items": {
                        "$ref": "#/definitions/Step"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "Friendly name of the resource. Used for display only.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "description": "The root wrangling workflow specification.\nresource profile: 'workflow'"
}

