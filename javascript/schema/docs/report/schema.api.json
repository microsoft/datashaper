{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.29.2",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@datashaper/schema!",
  "docComment": "",
  "name": "@datashaper/schema",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@datashaper/schema!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!AggregateArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AggregateArgs extends "
            },
            {
              "kind": "Reference",
              "text": "RollupArgs",
              "canonicalReference": "@datashaper/schema!RollupArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AggregateArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!AggregateArgs#groupby:member",
              "docComment": "/**\n * Column to group by\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupby: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "groupby",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!BasicInput:interface",
          "docComment": "/**\n * Single-input, single-output step I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BasicInput "
            }
          ],
          "releaseTag": "Public",
          "name": "BasicInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BasicInput#input:member",
              "docComment": "/**\n * Standard step input; single source with default name \"source\".\n *\n * If undefined, the default output of the previous step will be used (if available). If no previous step is available, this will remain undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowStepId",
                  "canonicalReference": "@datashaper/schema!WorkflowStepId:type"
                },
                {
                  "kind": "Content",
                  "text": " | {\n        source: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Bin:interface",
          "docComment": "/**\n * Describes a data bin in terms of inclusive lower bound and count of values in the bin.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Bin "
            }
          ],
          "releaseTag": "Public",
          "name": "Bin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Bin#count:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Bin#min:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!BinArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BinArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BinArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#clamped:member",
              "docComment": "/**\n * If true, values outside of the min/max boundaries will be clamped to those boundaries rather than +/-Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clamped?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clamped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#fixedcount:member",
              "docComment": "/**\n * Fixed number of bins. Note that the bin placements are inclusive of the bottom boundary and exclusive of the top boundary - this means there is always one extra bin for the max value when using fixed count.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fixedcount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fixedcount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#fixedwidth:member",
              "docComment": "/**\n * Exact step size between bins\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fixedwidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fixedwidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#max:member",
              "docComment": "/**\n * Max boundary to categorize values into. If cell values are above this, they will default to +Infinity unless clamped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#min:member",
              "docComment": "/**\n * Min boundary to categorize values into. If cell values are below this, they will default to -Infinity unless clamped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#nice:member",
              "docComment": "/**\n * Indicates whether bins should be rounded in a readable human-friendly way.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nice?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#printRange:member",
              "docComment": "/**\n * If true, the range for each bin will be printed as the cell value instead of the truncated numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "printRange?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "printRange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BinArgs#strategy:member",
              "docComment": "/**\n * Binning technique to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "BinStrategy",
                  "canonicalReference": "@datashaper/schema!BinStrategy:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!BinarizeArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BinarizeArgs extends "
            },
            {
              "kind": "Reference",
              "text": "FilterArgs",
              "canonicalReference": "@datashaper/schema!FilterArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BinarizeArgs",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!BinStrategy:enum",
          "docComment": "/**\n * Describes the binning technique to use. See numpy for detailed definitions: https://numpy.org/doc/stable/reference/generated/numpy.histogram_bin_edges.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum BinStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "BinStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Auto:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Auto = "
                },
                {
                  "kind": "Content",
                  "text": "\"auto\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Auto"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Doane:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Doane = "
                },
                {
                  "kind": "Content",
                  "text": "\"doane\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Doane"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Fd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Fd = "
                },
                {
                  "kind": "Content",
                  "text": "\"fd\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Fd"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.FixedCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FixedCount = "
                },
                {
                  "kind": "Content",
                  "text": "\"fixed count\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FixedCount"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.FixedWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FixedWidth = "
                },
                {
                  "kind": "Content",
                  "text": "\"fixed width\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FixedWidth"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Rice:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Rice = "
                },
                {
                  "kind": "Content",
                  "text": "\"rice\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Rice"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Scott:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Scott = "
                },
                {
                  "kind": "Content",
                  "text": "\"scott\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Scott"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Sqrt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Sqrt = "
                },
                {
                  "kind": "Content",
                  "text": "\"sqrt\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Sqrt"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BinStrategy.Sturges:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Sturges = "
                },
                {
                  "kind": "Content",
                  "text": "\"sturges\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Sturges"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!BooleanArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BooleanArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BooleanArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BooleanArgs#operator:member",
              "docComment": "/**\n * Boolean comparison type to apply across the list of input column values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operator: "
                },
                {
                  "kind": "Reference",
                  "text": "BooleanOperator",
                  "canonicalReference": "@datashaper/schema!BooleanOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!BooleanComparisonOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum BooleanComparisonOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "BooleanComparisonOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.Equals:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Equals = "
                },
                {
                  "kind": "Content",
                  "text": "\"equals\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Equals"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.IsEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.IsFalse:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsFalse = "
                },
                {
                  "kind": "Content",
                  "text": "\"is false\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsFalse"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.IsNotEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsNotEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsNotEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.IsTrue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsTrue = "
                },
                {
                  "kind": "Content",
                  "text": "\"is true\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsTrue"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanComparisonOperator.NotEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NotEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not equal\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NotEqual"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!BooleanOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum BooleanOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "BooleanOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.AND:member",
              "docComment": "/**\n * All conditions must match for the result to be true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AND = "
                },
                {
                  "kind": "Content",
                  "text": "\"and\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.NAND:member",
              "docComment": "/**\n * Any number of conditions can match but not all of them for the result to be true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NAND = "
                },
                {
                  "kind": "Content",
                  "text": "\"nand\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NAND"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.NOR:member",
              "docComment": "/**\n * None of the conditions can match for the result to be true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NOR = "
                },
                {
                  "kind": "Content",
                  "text": "\"nor\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NOR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.OR:member",
              "docComment": "/**\n * Any match sets the result to true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OR = "
                },
                {
                  "kind": "Content",
                  "text": "\"or\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.XNOR:member",
              "docComment": "/**\n * Every pairwise comparison must be two `true` or two `false` to be true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "XNOR = "
                },
                {
                  "kind": "Content",
                  "text": "\"xnor\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "XNOR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!BooleanOperator.XOR:member",
              "docComment": "/**\n * Every pairwise comparison must contain one true and one false value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "XOR = "
                },
                {
                  "kind": "Content",
                  "text": "\"xor\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "XOR"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!BundleSchema:interface",
          "docComment": "/**\n * A schema for defining custom bundle types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BundleSchema "
            }
          ],
          "releaseTag": "Public",
          "name": "BundleSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BundleSchema#$schema:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$schema: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$schema",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BundleSchema#accepts:member",
              "docComment": "/**\n * The kinds of relationships that may be defined in bundle sources.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accepts: "
                },
                {
                  "kind": "Reference",
                  "text": "RelationshipConstraint",
                  "canonicalReference": "@datashaper/schema!RelationshipConstraint:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accepts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!BundleSchema#profile:member",
              "docComment": "/**\n * Defines the resource type. Known resource types should have accompanying processors and rendering components. Unknown resource types can be interrogated to determine if the format is understandable by an existing component. Note that this could be inferred from $schema, but a simple string here is easier to deal with in code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Category:interface",
          "docComment": "/**\n * Describes a nominal category in terms of category name and count of values in the category.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Category "
            }
          ],
          "releaseTag": "Public",
          "name": "Category",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Category#count:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Category#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!CodebookSchema:interface",
          "docComment": "/**\n * This contains all of the field-level details for interpreting a dataset, including data types, mapping, and metadata. Note that with persisted metadata and field examples, a dataset can often be visualized and described to the user without actually loading the source file. resource profile: 'codebook'\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CodebookSchema extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSchema",
              "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CodebookSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!CodebookSchema#fields:member",
              "docComment": "/**\n * The per-field encodings. These contain interpretive information about the data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fields: "
                },
                {
                  "kind": "Reference",
                  "text": "Field",
                  "canonicalReference": "@datashaper/schema!Field:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fields",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!CodebookSchema#profile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile: "
                },
                {
                  "kind": "Reference",
                  "text": "KnownProfile.Codebook",
                  "canonicalReference": "@datashaper/schema!KnownProfile.Codebook:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!CodebookStrategy:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CodebookStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "CodebookStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!CodebookStrategy.DataTypeAndMapping:member",
              "docComment": "/**\n * Apply both data type and mapping for each column, per the codebook definition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DataTypeAndMapping = "
                },
                {
                  "kind": "Content",
                  "text": "\"data type and mapping\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DataTypeAndMapping"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!CodebookStrategy.DataTypeOnly:member",
              "docComment": "/**\n * Only parse data types for each column, per the codebook definition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DataTypeOnly = "
                },
                {
                  "kind": "Content",
                  "text": "\"data type only\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DataTypeOnly"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!CodebookStrategy.MappingOnly:member",
              "docComment": "/**\n * Only apply mappings for each column, per the codebook definition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MappingOnly = "
                },
                {
                  "kind": "Content",
                  "text": "\"mapping only\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MappingOnly"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!ComparisonStrategy:enum",
          "docComment": "/**\n * Indicates the comparison type used for a filter operation. This is done on a row-by-row basis.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ComparisonStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "ComparisonStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ComparisonStrategy.Column:member",
              "docComment": "/**\n * The comparison value is the value from the same row in another column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Column = "
                },
                {
                  "kind": "Content",
                  "text": "\"column\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Column"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ComparisonStrategy.Value:member",
              "docComment": "/**\n * The comparison value is a literal value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Value = "
                },
                {
                  "kind": "Content",
                  "text": "\"value\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Value"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Constraints:interface",
          "docComment": "/**\n * Validation constraints for a field.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Constraints "
            }
          ],
          "releaseTag": "Public",
          "name": "Constraints",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#enum:member",
              "docComment": "/**\n * Strict list of allowed values in the column.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#maximum:member",
              "docComment": "/**\n * For numbers or dates, this is the maximum allowed value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximum?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maximum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#maxLength:member",
              "docComment": "/**\n * For strings or arrays, this is the maximum allowed length of values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#minimum:member",
              "docComment": "/**\n * For numbers or dates, this is the minimum allowed value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimum?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minimum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#minLength:member",
              "docComment": "/**\n * For strings or arrays, this is the minimum allowed length of values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#pattern:member",
              "docComment": "/**\n * RegExp pattern that string values must match.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#required:member",
              "docComment": "/**\n * Indicates that this field is required (not nullable).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Constraints#unique:member",
              "docComment": "/**\n * Indicates that every value in this column must be unique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unique?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!ConvertArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConvertArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ConvertArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ConvertArgs#delimiter:member",
              "docComment": "/**\n * Delimiter to use for identifying decimals when converting strings to numbers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delimiter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delimiter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ConvertArgs#formatPattern:member",
              "docComment": "/**\n * Format string to use when converting strings to dates. Follows strptime format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatPattern?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "formatPattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ConvertArgs#radix:member",
              "docComment": "/**\n * Radix to use for parsing strings into ints\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radix?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "radix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ConvertArgs#type:member",
              "docComment": "/**\n * Output type to convert the column values to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseType",
                  "canonicalReference": "@datashaper/schema!ParseType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!CopyArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CopyArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyArgs",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createCodebookSchemaObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCodebookSchemaObject(input: "
            },
            {
              "kind": "Reference",
              "text": "FactoryInput",
              "canonicalReference": "@datashaper/schema!FactoryInput:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createCodebookSchemaObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createDataPackageSchemaObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createDataPackageSchemaObject(input: "
            },
            {
              "kind": "Reference",
              "text": "FactoryInput",
              "canonicalReference": "@datashaper/schema!FactoryInput:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataPackageSchema",
              "canonicalReference": "@datashaper/schema!DataPackageSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DataPackageSchema",
              "canonicalReference": "@datashaper/schema!DataPackageSchema:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createDataPackageSchemaObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createDataTableSchemaObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createDataTableSchemaObject(input: "
            },
            {
              "kind": "Reference",
              "text": "FactoryInput",
              "canonicalReference": "@datashaper/schema!FactoryInput:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createDataTableSchemaObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createSchemaValidator:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSchemaValidator(): "
            },
            {
              "kind": "Reference",
              "text": "Ajv",
              "canonicalReference": "ajv!~Ajv:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "createSchemaValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createTableBundleSchemaObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createTableBundleSchemaObject(input: "
            },
            {
              "kind": "Reference",
              "text": "FactoryInput",
              "canonicalReference": "@datashaper/schema!FactoryInput:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TableBundleSchema",
              "canonicalReference": "@datashaper/schema!TableBundleSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TableBundleSchema",
              "canonicalReference": "@datashaper/schema!TableBundleSchema:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createTableBundleSchemaObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/schema!createWorkflowSchemaObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createWorkflowSchemaObject(input: "
            },
            {
              "kind": "Reference",
              "text": "FactoryInput",
              "canonicalReference": "@datashaper/schema!FactoryInput:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WorkflowSchema",
              "canonicalReference": "@datashaper/schema!WorkflowSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "WorkflowSchema",
              "canonicalReference": "@datashaper/schema!WorkflowSchema:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "createWorkflowSchemaObject"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Criteria:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Criteria "
            }
          ],
          "releaseTag": "Public",
          "name": "Criteria",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Criteria#operator:member",
              "docComment": "/**\n * Filter operator to execute. Note the correct operator for the column data type must be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operator: "
                },
                {
                  "kind": "Reference",
                  "text": "NumericComparisonOperator",
                  "canonicalReference": "@datashaper/schema!NumericComparisonOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "StringComparisonOperator",
                  "canonicalReference": "@datashaper/schema!StringComparisonOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "BooleanComparisonOperator",
                  "canonicalReference": "@datashaper/schema!BooleanComparisonOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DateComparisonOperator",
                  "canonicalReference": "@datashaper/schema!DateComparisonOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Criteria#strategy:member",
              "docComment": "/**\n * Indicates whether the filter should be directly against a value, or against the value of another column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "ComparisonStrategy",
                  "canonicalReference": "@datashaper/schema!ComparisonStrategy:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Criteria#value:member",
              "docComment": "/**\n * Comparison value for the column. This is either a direct value to compare if strategy is ComparisonStrategy.Value, or the name of another column to compare if strategy is ComparisonStrategy.Column. Not required if the operator is self-defining (e.g., 'is empty')\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!DataFormat:enum",
          "docComment": "/**\n * Base format the data is stored within. This will expand to include additional formats such as Arrow and Parquet over time. TODO: we've seen a number of examples in the wild using JSON Lines https://jsonlines.org/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DataFormat "
            }
          ],
          "releaseTag": "Public",
          "name": "DataFormat",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataFormat.ARROW:member",
              "docComment": "/**\n * Arrow format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ARROW = "
                },
                {
                  "kind": "Content",
                  "text": "\"arrow\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ARROW"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataFormat.CSV:member",
              "docComment": "/**\n * Any delimited row format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CSV = "
                },
                {
                  "kind": "Content",
                  "text": "\"csv\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CSV"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataFormat.JSON:member",
              "docComment": "/**\n * Valid serialized JSON string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "JSON = "
                },
                {
                  "kind": "Content",
                  "text": "\"json\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "JSON"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!DataNature:enum",
          "docComment": "/**\n * Indicates the expected general layout of the data. This could be used to provide validation hints. For example, microdata must have one row per subject. TODO: \"timeseries\" as distinct from \"panel\"? others?\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DataNature "
            }
          ],
          "releaseTag": "Public",
          "name": "DataNature",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataNature.Micro:member",
              "docComment": "/**\n * Each row refers to a single subject. An example is a database of records about a person (name, address, etc.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Micro = "
                },
                {
                  "kind": "Content",
                  "text": "\"micro\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Micro"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataNature.Panel:member",
              "docComment": "/**\n * Rows refer to measurements over time of a group. An example is aggregate yearly smoking data for each US state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Panel = "
                },
                {
                  "kind": "Content",
                  "text": "\"panel\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Panel"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!DataOrientation:enum",
          "docComment": "/**\n * Indicates the orientation of the data within the file.\n *\n * Most CSV data files are 'values' (row-oriented).\n *\n * JSON files can commonly be either. Records are probably more common, though require more space due to replication of keys. Apache Arrow or Parquet are columnar. This nearly aligns with pandas: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#json\n *\n * A key difference (which probably needs resolved) is that we don't yet support the notion of an index. See their example for \"columns\" or \"index\" orientation, which is a nested structure.\n *\n * Example JSON formats: records: [\\{ colA: valueA1, colB: valueB1 \\}, \\{ colA: valueA2, colB: valueB2 \\}]\n *\n * columns: \\{ colA: [valueA1, valueA2], colB: [valueB1, valueB2] \\}\n *\n * array: [\"value1\", \"value2\"]\n *\n * values: [ [\"colA\", \"colB\"], [\"valueA1\", \"valueA2\"], [\"valueA2\", \"valueB2\"] ]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DataOrientation "
            }
          ],
          "releaseTag": "Public",
          "name": "DataOrientation",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataOrientation.Array:member",
              "docComment": "/**\n * Data is stored in a flat array. If a matrix definition is provided, this can be transposed into columns/rows, otherwise it is assumed to be a single column of data.length rows.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Array = "
                },
                {
                  "kind": "Content",
                  "text": "\"array\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Array"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataOrientation.Columnar:member",
              "docComment": "/**\n * Data is oriented in a columnar manner, such as that used by Apache Arrow or Parquet. Column headers run down the vertical axis, and cell values run across the horizontal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Columnar = "
                },
                {
                  "kind": "Content",
                  "text": "\"columns\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Columnar"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataOrientation.Records:member",
              "docComment": "/**\n * Data is oriented as an array of object records, akin to most databases. Column headers run along the horizontal axis, and cell values run down the vertical.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Records = "
                },
                {
                  "kind": "Content",
                  "text": "\"records\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Records"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataOrientation.Values:member",
              "docComment": "/**\n * Data is stored as raw rows. This is the default for CSVs. If specified for JSON files, it is expected that file contents are a nested array - the outer array is the rows, and each row has an array of column values. The first row is assumed to be the column headers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Values = "
                },
                {
                  "kind": "Content",
                  "text": "\"values\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Values"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DataPackageSchema:interface",
          "docComment": "/**\n * Defines a Data Package, which is a collection of data resources such as files and schemas. Loosely based on the Frictionless spec, but modified where needed to meet our needs. https://specs.frictionlessdata.io/data-package/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataPackageSchema extends "
            },
            {
              "kind": "Reference",
              "text": "Named",
              "canonicalReference": "@datashaper/schema!Named:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DataPackageSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataPackageSchema#$schema:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$schema: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$schema",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataPackageSchema#profile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile: "
                },
                {
                  "kind": "Reference",
                  "text": "KnownProfile.DataPackage",
                  "canonicalReference": "@datashaper/schema!KnownProfile.DataPackage:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataPackageSchema#resources:member",
              "docComment": "/**\n * List of Resources that make up the data package. May also be a list of raw strings which are paths to Resource files in the bundle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resources: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceSchema",
                  "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DataShape:interface",
          "docComment": "/**\n * Defines parameters for understanding the logical structure of data contents.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataShape "
            }
          ],
          "releaseTag": "Public",
          "name": "DataShape",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataShape#matrix:member",
              "docComment": "/**\n * Defines the Row x Column layout of a raw list of values (e.g., a pandas Series). For example, \\{ data: [1,2,3,4,5,6], shape: \\{ matrix: [3, 2] \\} \\} is interpreted as table 1 2 3 4 5 6\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "matrix?: "
                },
                {
                  "kind": "Content",
                  "text": "[width: number, height: number]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "matrix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataShape#nature:member",
              "docComment": "/**\n * Defines the expected nature of the dataset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nature?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataNature",
                  "canonicalReference": "@datashaper/schema!DataNature:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nature",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataShape#orientation:member",
              "docComment": "/**\n * Data orientation. Default: \"values\" is the only valid option if the format is csv, \"records\" is default if JSON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "orientation?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataOrientation",
                  "canonicalReference": "@datashaper/schema!DataOrientation:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "orientation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DataTableSchema:interface",
          "docComment": "/**\n * This defines the table-containing resource type. A dataset can be embedded directly using the `data` property, or it can be linked to a raw file using the `path`. If the latter, optional format and parsing options can be applied to aid interpreting the file contents. resource profile: 'datatable'\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataTableSchema extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSchema",
              "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DataTableSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#columns:member",
              "docComment": "/**\n * Number of columns in the data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columns?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "columns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#data:member",
              "docComment": "/**\n * Option to embed the data directly in the JSON descriptor. Valid data formats are: - string: raw CSV data, parsed according to the `parser` options - array: raw JSON data, parsed according to the `shape` options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "string | unknown[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#encoding:member",
              "docComment": "/**\n * String encoding. Default: \"utf-8\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#format:member",
              "docComment": "/**\n * File format of the resource to inform load/parse. Note that if the data property is present, this is assumed to be \"JSON\". Default: \"csv\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataFormat",
                  "canonicalReference": "@datashaper/schema!DataFormat:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#parser:member",
              "docComment": "/**\n * Parser options for interpreting a CSV or other text file that needs parse instruction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parser?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParserOptions",
                  "canonicalReference": "@datashaper/schema!ParserOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parser",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#profile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile: "
                },
                {
                  "kind": "Reference",
                  "text": "KnownProfile.DataTable",
                  "canonicalReference": "@datashaper/schema!KnownProfile.DataTable:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#rows:member",
              "docComment": "/**\n * Number of rows in the data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rows?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#shape:member",
              "docComment": "/**\n * Defines the shape and structure of stored data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shape?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataShape",
                  "canonicalReference": "@datashaper/schema!DataShape:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "shape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DataTableSchema#typeHints:member",
              "docComment": "/**\n * Options for converting string values to strict types. Note that options related to data typing only apply if type detection is turned on. Otherwise all cell values are treated as strings. Defaults based on pandas: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#csv-text-files\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeHints?: "
                },
                {
                  "kind": "Reference",
                  "text": "TypeHints",
                  "canonicalReference": "@datashaper/schema!TypeHints:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typeHints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!DataTableSchemaDefaults:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DataTableSchemaDefaults: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DataTableSchemaDefaults",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!DataType:enum",
          "docComment": "/**\n * Explicit data type of the value (i.e., for a column or property). TODO: clarify/update null/undefined\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DataType "
            }
          ],
          "releaseTag": "Public",
          "name": "DataType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Array:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Array = "
                },
                {
                  "kind": "Content",
                  "text": "\"array\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Array"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Boolean:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Boolean = "
                },
                {
                  "kind": "Content",
                  "text": "\"boolean\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Boolean"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Date:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Date = "
                },
                {
                  "kind": "Content",
                  "text": "\"date\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Date"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Datetime:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Datetime = "
                },
                {
                  "kind": "Content",
                  "text": "\"datetime\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Datetime"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Integer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Integer = "
                },
                {
                  "kind": "Content",
                  "text": "\"integer\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Integer"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Null:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Null = "
                },
                {
                  "kind": "Content",
                  "text": "\"null\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Null"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Number:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Number = "
                },
                {
                  "kind": "Content",
                  "text": "\"number\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Number"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Object = "
                },
                {
                  "kind": "Content",
                  "text": "\"object\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Object"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.String:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "String = "
                },
                {
                  "kind": "Content",
                  "text": "\"string\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "String"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Time:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Time = "
                },
                {
                  "kind": "Content",
                  "text": "\"time\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Time"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Undefined:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Undefined = "
                },
                {
                  "kind": "Content",
                  "text": "\"undefined\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Undefined"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DataType.Unknown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unknown = "
                },
                {
                  "kind": "Content",
                  "text": "\"unknown\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unknown"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!DateComparisonOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DateComparisonOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "DateComparisonOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.After:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "After = "
                },
                {
                  "kind": "Content",
                  "text": "\"after\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "After"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.Before:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Before = "
                },
                {
                  "kind": "Content",
                  "text": "\"before\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Before"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.Equals:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Equals = "
                },
                {
                  "kind": "Content",
                  "text": "\"equals\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Equals"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.IsEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.IsNotEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsNotEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsNotEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!DateComparisonOperator.NotEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NotEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not equal\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NotEqual"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!DedupeArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DedupeArgs = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DedupeArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DeriveArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DeriveArgs extends "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DeriveArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DeriveArgs#column1:member",
              "docComment": "/**\n * Column on the left side of the operation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "column1: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "column1",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DeriveArgs#column2:member",
              "docComment": "/**\n * Column on the right side of the operation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "column2: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "column2",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DeriveArgs#operator:member",
              "docComment": "/**\n * Math operation to perform row-by-row on the two columns\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operator: "
                },
                {
                  "kind": "Reference",
                  "text": "MathOperator",
                  "canonicalReference": "@datashaper/schema!MathOperator:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DestructureArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DestructureArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DestructureArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DestructureArgs#keys:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keys?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keys",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!DropArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DropArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DropArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!DualInput:interface",
          "docComment": "/**\n * Dual-input, single-output step I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DualInput "
            }
          ],
          "releaseTag": "Public",
          "name": "DualInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!DualInput#input:member",
              "docComment": "/**\n * The inputs that must be bound; \"source\" & \"other\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        source: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        other: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!EncodeDecodeArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EncodeDecodeArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "EncodeDecodeArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!EncodeDecodeArgs#codebook:member",
              "docComment": "/**\n * Codebook to apply to the table.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "codebook: "
                },
                {
                  "kind": "Reference",
                  "text": "CodebookSchema",
                  "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "codebook",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!EncodeDecodeArgs#strategy:member",
              "docComment": "/**\n * Strategy for applying the codebook to the table.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "CodebookStrategy",
                  "canonicalReference": "@datashaper/schema!CodebookStrategy:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!EraseArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EraseArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EraseArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!EraseArgs#value:member",
              "docComment": "/**\n * Value to match and erase (set to undefined) in the column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!ErrorCode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ErrorCode "
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorCode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Enum:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Enum = "
                },
                {
                  "kind": "Content",
                  "text": "\"enum\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Enum"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Maximum:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Maximum = "
                },
                {
                  "kind": "Content",
                  "text": "\"maximum\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Maximum"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.MaxLength:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MaxLength = "
                },
                {
                  "kind": "Content",
                  "text": "\"maximum length\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MaxLength"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Minimum:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Minimum = "
                },
                {
                  "kind": "Content",
                  "text": "\"minimum\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Minimum"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.MinLength:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MinLength = "
                },
                {
                  "kind": "Content",
                  "text": "\"minimum length\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MinLength"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Pattern:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Pattern = "
                },
                {
                  "kind": "Content",
                  "text": "\"pattern\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Pattern"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Required:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Required = "
                },
                {
                  "kind": "Content",
                  "text": "\"required\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Required"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ErrorCode.Unique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unique = "
                },
                {
                  "kind": "Content",
                  "text": "\"unique\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unique"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!FactoryInput:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FactoryInput<T> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, '$schema' | 'name' | 'profile'> & {\n    name?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FactoryInput",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Field:interface",
          "docComment": "/**\n * Contains the full schema definition and metadata for a data field (usually a table column). This includes the required data type, various data nature and rendering properties, potential validation rules, and mappings from a data dictionary.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Field extends "
            },
            {
              "kind": "Reference",
              "text": "Named",
              "canonicalReference": "@datashaper/schema!Named:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Field",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#constraints:member",
              "docComment": "/**\n * Validation constraints for the values in the field to adhere to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constraints?: "
                },
                {
                  "kind": "Reference",
                  "text": "Constraints",
                  "canonicalReference": "@datashaper/schema!Constraints:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constraints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#derivedFrom:member",
              "docComment": "/**\n * Provenance hints for the source of this field. For example, categorical fields are often onehot encoded into new binary columns, this would link back to the original categorical.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "derivedFrom?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "derivedFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#example:member",
              "docComment": "/**\n * Single example of a valid data value for the field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "example?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "example",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#exclude:member",
              "docComment": "/**\n * Indicates that this field from the dataset should be excluded from computations and display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exclude?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exclude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#format:member",
              "docComment": "/**\n * Describes the semantic or parsing format for the values. This is based on JSONSchema. See https://json-schema.org/draft/2020-12/json-schema-validation.html#name-vocabularies-for-semantic-c TODO: JSONSchema is pretty flexible here, and we should align with it. For example, there are standard string (uri, email, ip-address, etc.) that define known formats. However, you can also link out to any arbitrary schema that validates a data value. JSONSchema also uses the format field to describe date and time notation. Because dates are not a valid JSON type, they are represented as type = string, but format = date, time, date-time, or duration. We use the type in running code, so it seems appropriate to keep the expanded list, but maybe this can contain parsing instructions (e.g., a pattern) for converting date/time strings into values. https://json-schema.org/draft/2020-12/json-schema-validation.html#name-defined-formats\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#inverse:member",
              "docComment": "/**\n * Indicates that values are mapped inverse to typical expectation, and may need to be displayed in the opposite direction. Closely related to nature, particular for categorical ordinal values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inverse?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inverse",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#mapping:member",
              "docComment": "/**\n * This provides a mapping between cell values and some other value. Most commonly this is the core \"data dictionary\", whereby cell values are stored as numeric categories, and the dictionary defines textual descriptions of the actual meaning. If numeric, the keys are usually categorical ordinal or nominal. String keys are often commonly used (for example, medical data often use short alphanumeric codes to represent diagnostic strings).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mapping?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mapping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#nature:member",
              "docComment": "/**\n * Data nature. This is primarily applicable to numbers, which have different characters that define how we should display them in charts. default: continuous TODO: there is a large block of nature-related content in CauseDis. is some of this transient application state? how much do we need to carry in a schema?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nature?: "
                },
                {
                  "kind": "Reference",
                  "text": "VariableNature",
                  "canonicalReference": "@datashaper/schema!VariableNature:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nature",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#subtype:member",
              "docComment": "/**\n * If the type is an array, this is the type of the array elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtype?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataType",
                  "canonicalReference": "@datashaper/schema!DataType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subtype",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#tags:member",
              "docComment": "/**\n * Optional descriptive tags for the field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tags?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tags",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#type:member",
              "docComment": "/**\n * Strict type of the field. Note that columns may not mix types in their rows for most of the data formats we use. Default: 'string'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataType",
                  "canonicalReference": "@datashaper/schema!DataType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#unit:member",
              "docComment": "/**\n * QUDT code for the variable unit (i.e., meters, pounds, etc.). https://qudt.org/2.1/vocab/unit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unit?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Field#unitDescription:member",
              "docComment": "/**\n * Description of the unit for friendly display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unitDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unitDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!FieldAggregateOperation:enum",
          "docComment": "/**\n * This is the subset of aggregate functions that can operate on a single field so we don't accommodate additional args. See https://uwdata.github.io/arquero/api/op#aggregate-functions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum FieldAggregateOperation "
            }
          ],
          "releaseTag": "Public",
          "name": "FieldAggregateOperation",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Any:member",
              "docComment": "/**\n * Select any value. Implementation-dependent - this could be random, the first found, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Any = "
                },
                {
                  "kind": "Content",
                  "text": "\"any\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Any"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Count:member",
              "docComment": "/**\n * Count the number of values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Count = "
                },
                {
                  "kind": "Content",
                  "text": "\"count\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Count"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.CountDistinct:member",
              "docComment": "/**\n * Count the number of unique values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CountDistinct = "
                },
                {
                  "kind": "Content",
                  "text": "\"distinct\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CountDistinct"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.CreateArray:member",
              "docComment": "/**\n * Collect all of the values into an array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CreateArray = "
                },
                {
                  "kind": "Content",
                  "text": "\"array_agg\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CreateArray"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.CreateArrayDistinct:member",
              "docComment": "/**\n * Collect all of the unique values into an array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CreateArrayDistinct = "
                },
                {
                  "kind": "Content",
                  "text": "\"array_agg_distinct\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CreateArrayDistinct"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Invalid:member",
              "docComment": "/**\n * Count only the valid values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Invalid = "
                },
                {
                  "kind": "Content",
                  "text": "\"invalid\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Invalid"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Max:member",
              "docComment": "/**\n * Find the max value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Max = "
                },
                {
                  "kind": "Content",
                  "text": "\"max\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Max"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Mean:member",
              "docComment": "/**\n * Compute the mean of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Mean = "
                },
                {
                  "kind": "Content",
                  "text": "\"mean\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Mean"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Median:member",
              "docComment": "/**\n * Compute the median of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Median = "
                },
                {
                  "kind": "Content",
                  "text": "\"median\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Median"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Min:member",
              "docComment": "/**\n * Find the min value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Min = "
                },
                {
                  "kind": "Content",
                  "text": "\"min\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Min"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Mode:member",
              "docComment": "/**\n * Compute the mode of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Mode = "
                },
                {
                  "kind": "Content",
                  "text": "\"mode\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Mode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Product:member",
              "docComment": "/**\n * Compute the product of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Product = "
                },
                {
                  "kind": "Content",
                  "text": "\"product\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Product"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.StandardDeviation:member",
              "docComment": "/**\n * Compute the standard deviation of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StandardDeviation = "
                },
                {
                  "kind": "Content",
                  "text": "\"stdev\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StandardDeviation"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.StandardDeviationPopulation:member",
              "docComment": "/**\n * Compute the population standard deviation of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StandardDeviationPopulation = "
                },
                {
                  "kind": "Content",
                  "text": "\"stdevp\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StandardDeviationPopulation"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Sum:member",
              "docComment": "/**\n * Sum the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Sum = "
                },
                {
                  "kind": "Content",
                  "text": "\"sum\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Sum"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Valid:member",
              "docComment": "/**\n * Count only the valid (non-null, non-error) values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Valid = "
                },
                {
                  "kind": "Content",
                  "text": "\"valid\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Valid"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FieldAggregateOperation.Variance:member",
              "docComment": "/**\n * Compute the variance of the values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Variance = "
                },
                {
                  "kind": "Content",
                  "text": "\"variance\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Variance"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!FieldError:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FieldError "
            }
          ],
          "releaseTag": "Public",
          "name": "FieldError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldError#constraints:member",
              "docComment": "/**\n * Constraints for the field so parameters can be retrieved. Note that there must be an entry in the constraints object for the rule that failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constraints: "
                },
                {
                  "kind": "Reference",
                  "text": "Constraints",
                  "canonicalReference": "@datashaper/schema!Constraints:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constraints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldError#indexes:member",
              "docComment": "/**\n * Optional row indexes that failed the validation (if `includeIndexes` was true during validation)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indexes?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "indexes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldError#name:member",
              "docComment": "/**\n * Name of the field this error is associated with\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldError#rule:member",
              "docComment": "/**\n * Rule that failed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rule: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorCode",
                  "canonicalReference": "@datashaper/schema!ErrorCode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rule",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldError#validate:member",
              "docComment": "/**\n * Validation function that produced the error, useful for re-applying at runtime.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validate?: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationFunction",
                  "canonicalReference": "@datashaper/schema!ValidationFunction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "validate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!FieldMetadata:interface",
          "docComment": "/**\n * Holds core metadata/stats for a data field.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FieldMetadata "
            }
          ],
          "releaseTag": "Public",
          "name": "FieldMetadata",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#bins:member",
              "docComment": "/**\n * Computed histogram bins for numeric fields.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bins?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bin",
                  "canonicalReference": "@datashaper/schema!Bin:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bins",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#categories:member",
              "docComment": "/**\n * List of unique categories for string fields.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "categories?: "
                },
                {
                  "kind": "Reference",
                  "text": "Category",
                  "canonicalReference": "@datashaper/schema!Category:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "categories",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#count:member",
              "docComment": "/**\n * Count of valid values in the column (excluding invalid, null, etc.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#distinct:member",
              "docComment": "/**\n * Count of unique values in the column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distinct?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "distinct",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#invalid:member",
              "docComment": "/**\n * Count of invalid/null values in the column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalid?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "invalid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#magnitude:member",
              "docComment": "/**\n * Magnitude of the data, i.e., the absolute difference between the min and max values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "magnitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "magnitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#maximum:member",
              "docComment": "/**\n * Max value. Note that this can be specified rather than computed, in which case it defines valid boundaries for the data values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximum?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maximum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#mean:member",
              "docComment": "/**\n * Mean.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mean?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mean",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#median:member",
              "docComment": "/**\n * Median.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "median",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#minimum:member",
              "docComment": "/**\n * Min value. Note that this can be specified rather than computed, in which case it defines valid boundaries for the data values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimum?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "minimum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#mode:member",
              "docComment": "/**\n * Mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#stdev:member",
              "docComment": "/**\n * Standard deviation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stdev?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stdev",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FieldMetadata#type:member",
              "docComment": "/**\n * TEMP: this is determined via stats introspection, but our much more robust type discovery for the codebooks should be used, and the type on Field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataType",
                  "canonicalReference": "@datashaper/schema!DataType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!FileType:enum",
          "docComment": "/**\n * These are the available formats for the snapshot verb.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum FileType "
            }
          ],
          "releaseTag": "Public",
          "name": "FileType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FileType.Csv:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Csv = "
                },
                {
                  "kind": "Content",
                  "text": "\"csv\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Csv"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FileType.Json:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Json = "
                },
                {
                  "kind": "Content",
                  "text": "\"json\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Json"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!FileType.Parquet:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Parquet = "
                },
                {
                  "kind": "Content",
                  "text": "\"parquet\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Parquet"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!FillArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FillArgs extends "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FillArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FillArgs#value:member",
              "docComment": "/**\n * Value to fill in the new column. All rows will receive this value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!FilterArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FilterArgs extends "
            },
            {
              "kind": "Reference",
              "text": "Criteria",
              "canonicalReference": "@datashaper/schema!Criteria:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FilterArgs",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!FoldArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FoldArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FoldArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!FoldArgs#to:member",
              "docComment": "/**\n * Two-element array of names for the output [key, value]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "to?: "
                },
                {
                  "kind": "Content",
                  "text": "[string, string]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "to",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!GroupbyArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GroupbyArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GroupbyArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!ImputeArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImputeArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ImputeArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ImputeArgs#value:member",
              "docComment": "/**\n * Value to fill in empty cells\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!InputBinding:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InputBinding = "
            },
            {
              "kind": "Content",
              "text": "{\n    step: "
            },
            {
              "kind": "Reference",
              "text": "WorkflowStepId",
              "canonicalReference": "@datashaper/schema!WorkflowStepId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    table?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InputBinding",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!InputColumn:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InputColumn = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InputColumn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!InputColumnArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InputColumnArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "InputColumnArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!InputColumnArgs#column:member",
              "docComment": "/**\n * Name of the input column for columnar operations\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "column: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "column",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface",
          "docComment": "/**\n * Base interface for a number of operations that work on a column list.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InputColumnListArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "InputColumnListArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs#columns:member",
              "docComment": "/**\n * List of input columns for operations that work across multiple columns\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columns: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "columns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!InputColumnRecordArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InputColumnRecordArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "InputColumnRecordArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!InputColumnRecordArgs#columns:member",
              "docComment": "/**\n * Map of old column to new column names\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columns: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ", string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "columns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!InputKeyValueArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InputKeyValueArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "InputKeyValueArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!InputKeyValueArgs#key:member",
              "docComment": "/**\n * Key column for the operation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!InputKeyValueArgs#value:member",
              "docComment": "/**\n * Value column for the operation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!JoinArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JoinArgs extends "
            },
            {
              "kind": "Reference",
              "text": "JoinArgsBase",
              "canonicalReference": "@datashaper/schema!JoinArgsBase:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "JoinArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!JoinArgs#strategy:member",
              "docComment": "/**\n * Type of join to perform\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strategy?: "
                },
                {
                  "kind": "Reference",
                  "text": "JoinStrategy",
                  "canonicalReference": "@datashaper/schema!JoinStrategy:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!JoinArgsBase:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JoinArgsBase "
            }
          ],
          "releaseTag": "Public",
          "name": "JoinArgsBase",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!JoinArgsBase#on:member",
              "docComment": "/**\n * Column names to join with. If only one is specified, it will use for both tables. If none are specified, all matching column names will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on?: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "on",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!JoinStrategy:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum JoinStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "JoinStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.AntiJoin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AntiJoin = "
                },
                {
                  "kind": "Content",
                  "text": "\"anti join\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AntiJoin"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.Cross:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Cross = "
                },
                {
                  "kind": "Content",
                  "text": "\"cross\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Cross"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.FullOuter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FullOuter = "
                },
                {
                  "kind": "Content",
                  "text": "\"full outer\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FullOuter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.Inner:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Inner = "
                },
                {
                  "kind": "Content",
                  "text": "\"inner\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Inner"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.LeftOuter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LeftOuter = "
                },
                {
                  "kind": "Content",
                  "text": "\"left outer\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LeftOuter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.RightOuter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RightOuter = "
                },
                {
                  "kind": "Content",
                  "text": "\"right outer\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RightOuter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!JoinStrategy.SemiJoin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SemiJoin = "
                },
                {
                  "kind": "Content",
                  "text": "\"semi join\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SemiJoin"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!KnownProfile:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum KnownProfile "
            }
          ],
          "releaseTag": "Public",
          "name": "KnownProfile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.Codebook:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Codebook = "
                },
                {
                  "kind": "Content",
                  "text": "\"codebook\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Codebook"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.DataPackage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DataPackage = "
                },
                {
                  "kind": "Content",
                  "text": "\"datapackage\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DataPackage"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.DataTable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DataTable = "
                },
                {
                  "kind": "Content",
                  "text": "\"datatable\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DataTable"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.TableBundle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TableBundle = "
                },
                {
                  "kind": "Content",
                  "text": "\"tablebundle\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TableBundle"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.UnknownResource:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnknownResource = "
                },
                {
                  "kind": "Content",
                  "text": "\"unknown\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnknownResource"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownProfile.Workflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Workflow = "
                },
                {
                  "kind": "Content",
                  "text": "\"workflow\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Workflow"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!KnownRel:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum KnownRel "
            }
          ],
          "releaseTag": "Public",
          "name": "KnownRel",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownRel.Codebook:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Codebook = "
                },
                {
                  "kind": "Content",
                  "text": "\"codebook\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Codebook"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownRel.Input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Input = "
                },
                {
                  "kind": "Content",
                  "text": "\"input\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Input"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!KnownRel.Workflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Workflow = "
                },
                {
                  "kind": "Content",
                  "text": "\"workflow\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Workflow"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!LATEST_CODEBOOK_SCHEMA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LATEST_CODEBOOK_SCHEMA: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LATEST_CODEBOOK_SCHEMA",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!LATEST_DATAPACKAGE_SCHEMA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LATEST_DATAPACKAGE_SCHEMA: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LATEST_DATAPACKAGE_SCHEMA",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!LATEST_DATATABLE_SCHEMA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LATEST_DATATABLE_SCHEMA: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LATEST_DATATABLE_SCHEMA",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!LATEST_TABLEBUNDLE_SCHEMA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LATEST_TABLEBUNDLE_SCHEMA: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LATEST_TABLEBUNDLE_SCHEMA",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!LATEST_WORKFLOW_SCHEMA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LATEST_WORKFLOW_SCHEMA: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LATEST_WORKFLOW_SCHEMA",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!LookupArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LookupArgs extends "
            },
            {
              "kind": "Reference",
              "text": "JoinArgsBase",
              "canonicalReference": "@datashaper/schema!JoinArgsBase:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LookupArgs",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!MathOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MathOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "MathOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MathOperator.Add:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Add = "
                },
                {
                  "kind": "Content",
                  "text": "\"+\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Add"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MathOperator.Divide:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Divide = "
                },
                {
                  "kind": "Content",
                  "text": "\"/\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Divide"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MathOperator.Multiply:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Multiply = "
                },
                {
                  "kind": "Content",
                  "text": "\"*\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Multiply"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MathOperator.Subtract:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Subtract = "
                },
                {
                  "kind": "Content",
                  "text": "\"-\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Subtract"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!MergeArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MergeArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MergeArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!MergeArgs#delimiter:member",
              "docComment": "/**\n * Delimiter to use when merging columns into a string. This is only necessary if MergeStrategy.Concat is used. If it is not supplied, the values are just mashed together.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delimiter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delimiter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!MergeArgs#strategy:member",
              "docComment": "/**\n * Strategy to use for merging the input columns\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "MergeStrategy",
                  "canonicalReference": "@datashaper/schema!MergeStrategy:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!MergeStrategy:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MergeStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "MergeStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MergeStrategy.Concat:member",
              "docComment": "/**\n * Concat all values into a string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Concat = "
                },
                {
                  "kind": "Content",
                  "text": "\"concat\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Concat"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MergeStrategy.CreateArray:member",
              "docComment": "/**\n * Concat all values into an array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CreateArray = "
                },
                {
                  "kind": "Content",
                  "text": "\"array\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CreateArray"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MergeStrategy.FirstOneWins:member",
              "docComment": "/**\n * Use the first valid value found in the list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FirstOneWins = "
                },
                {
                  "kind": "Content",
                  "text": "\"first one wins\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FirstOneWins"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!MergeStrategy.LastOneWins:member",
              "docComment": "/**\n * Use the last valid value found in the list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LastOneWins = "
                },
                {
                  "kind": "Content",
                  "text": "\"last one wins\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LastOneWins"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!Named:interface",
          "docComment": "/**\n * Base interface for sharing properties of named resources/objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Named "
            }
          ],
          "releaseTag": "Public",
          "name": "Named",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Named#description:member",
              "docComment": "/**\n * Description of the named resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Named#name:member",
              "docComment": "/**\n * User-specified name. This will serve as the local id (i.e., like a filename.) and should be URI-compatible. This should be editable, just like any other filename on a file system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!Named#title:member",
              "docComment": "/**\n * Friendly name of the resource. Used for display only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!NumericComparisonOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum NumericComparisonOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "NumericComparisonOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.Equals:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Equals = "
                },
                {
                  "kind": "Content",
                  "text": "\"=\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Equals"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.GreaterThan:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GreaterThan = "
                },
                {
                  "kind": "Content",
                  "text": "\">\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GreaterThan"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.GreaterThanOrEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GreaterThanOrEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\">=\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GreaterThanOrEqual"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.IsEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.IsNotEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsNotEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsNotEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.LessThan:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LessThan = "
                },
                {
                  "kind": "Content",
                  "text": "\"<\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LessThan"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.LessThanOrEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LessThanOrEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\"<=\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LessThanOrEqual"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!NumericComparisonOperator.NotEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NotEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\"!=\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NotEqual"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!OnehotArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OnehotArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OnehotArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!OnehotArgs#prefix:member",
              "docComment": "/**\n * Optional prefixes for the output column names\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!OrderbyArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OrderbyArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "OrderbyArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!OrderbyArgs#orders:member",
              "docComment": "/**\n * List of ordering instructions to apply\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "orders: "
                },
                {
                  "kind": "Reference",
                  "text": "OrderbyInstruction",
                  "canonicalReference": "@datashaper/schema!OrderbyInstruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "orders",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!OrderbyInstruction:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OrderbyInstruction "
            }
          ],
          "releaseTag": "Public",
          "name": "OrderbyInstruction",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!OrderbyInstruction#column:member",
              "docComment": "/**\n * Name of the column to order by\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "column: "
                },
                {
                  "kind": "Reference",
                  "text": "InputColumn",
                  "canonicalReference": "@datashaper/schema!InputColumn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "column",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!OrderbyInstruction#direction:member",
              "docComment": "/**\n * Direction to order by\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "SortDirection",
                  "canonicalReference": "@datashaper/schema!SortDirection:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OutputColumnArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "OutputColumnArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs#to:member",
              "docComment": "/**\n * Name of the output column to receive the operation's result.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "to: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "to",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!ParserOptions:interface",
          "docComment": "/**\n * Parsing options for delimited files. This is a mix of the options from pandas and spark.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParserOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ParserOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#comment:member",
              "docComment": "/**\n * Character that denotes a comment. Lines that begin with this character are ignored. Default: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "comment?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "comment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#delimiter:member",
              "docComment": "/**\n * Column delimiter. Default: ,\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delimiter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delimiter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#escapeChar:member",
              "docComment": "/**\n * String to use for escaping quotes. Default: none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "escapeChar?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "escapeChar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#header:member",
              "docComment": "/**\n * Indicates that the first row of the file contains column header names. If false, `names` should be supplied, otherwise incrementing numbers will be assigned as header names. Default: true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#lineTerminator:member",
              "docComment": "/**\n * Character that indicates the end of a line (row). Default: \\\\r, \\\\r\\\\n, or \\\\n, and *must* be one of these.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineTerminator?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineTerminator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#names:member",
              "docComment": "/**\n * List of column names to use. If this is not supplied, column names will be inferred from the first row of the data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "names?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "names",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#quoteChar:member",
              "docComment": "/**\n * Character to use for quoting strings. Default: \"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quoteChar?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "quoteChar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#readRows:member",
              "docComment": "/**\n * Number of rows to read from the data, starting at skip_rows (honors skipBlankLines). Default: Infinity\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readRows?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readRows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#skipBlankLines:member",
              "docComment": "/**\n * Skip blank lines when reading file. Default: true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipBlankLines?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipBlankLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ParserOptions#skipRows:member",
              "docComment": "/**\n * Number of rows to skip from the start of the data (honors skipBlankLines). Default: 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipRows?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipRows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!ParserOptionsDefaults:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ParserOptionsDefaults: "
            },
            {
              "kind": "Reference",
              "text": "ParserOptions",
              "canonicalReference": "@datashaper/schema!ParserOptions:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ParserOptionsDefaults",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!ParseType:enum",
          "docComment": "/**\n * This is a subset of data types available for parsing operations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ParseType "
            }
          ],
          "releaseTag": "Public",
          "name": "ParseType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.Array:member",
              "docComment": "/**\n * Type is an array of values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Array = "
                },
                {
                  "kind": "Content",
                  "text": "\"array\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Array"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.Boolean:member",
              "docComment": "/**\n * Type is a binary boolean (true/false)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Boolean = "
                },
                {
                  "kind": "Content",
                  "text": "\"boolean\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Boolean"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.Date:member",
              "docComment": "/**\n * Type is a date\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Date = "
                },
                {
                  "kind": "Content",
                  "text": "\"date\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Date"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.Decimal:member",
              "docComment": "/**\n * Type is a decimal (floating point number). Note that in JavaScript integers and decimals are both represented as \"number\", but the distinction is helpful for formatting/display and understanding user intent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Decimal = "
                },
                {
                  "kind": "Content",
                  "text": "\"float\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Decimal"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.Integer:member",
              "docComment": "/**\n * Type is an integer (whole number)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Integer = "
                },
                {
                  "kind": "Content",
                  "text": "\"int\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Integer"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!ParseType.String:member",
              "docComment": "/**\n * Type is a string of text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "String = "
                },
                {
                  "kind": "Content",
                  "text": "\"string\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "String"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!PivotArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PivotArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputKeyValueArgs",
              "canonicalReference": "@datashaper/schema!InputKeyValueArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PivotArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!PivotArgs#operation:member",
              "docComment": "/**\n * Aggregate/rollup operation to perform when doing the pivot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operation: "
                },
                {
                  "kind": "Reference",
                  "text": "FieldAggregateOperation",
                  "canonicalReference": "@datashaper/schema!FieldAggregateOperation:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!PrintArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PrintArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "PrintArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!PrintArgs#limit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "limit?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "limit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!PrintArgs#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!Profile:type",
          "docComment": "/**\n * Resources must have a profile, which is a key defining how it should be interpreted. Profiles are essentially shorthand for a schema URL. The core profiles for DataShaper are defined here, but any application can define one as a string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Profile = "
            },
            {
              "kind": "Reference",
              "text": "KnownProfile",
              "canonicalReference": "@datashaper/schema!KnownProfile:enum"
            },
            {
              "kind": "Content",
              "text": "\n/**\n * Any other custom profile string can be specified by applications.\n */\n | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Profile",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!RecodeArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RecodeArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RecodeArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RecodeArgs#mapping:member",
              "docComment": "/**\n * Mapping of old value to new for the recoding. Note that the key must be coercible to a string for map lookup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mapping: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@datashaper/schema!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mapping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!Rel:type",
          "docComment": "/**\n * A rel is a string that describes the relationship between a resource and its child.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Rel = "
            },
            {
              "kind": "Reference",
              "text": "KnownRel",
              "canonicalReference": "@datashaper/schema!KnownRel:enum"
            },
            {
              "kind": "Content",
              "text": "\n/**\n * Any other custom Rel type can be specified by bundles\n */\n | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Rel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!RelationshipConstraint:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelationshipConstraint "
            }
          ],
          "releaseTag": "Public",
          "name": "RelationshipConstraint",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RelationshipConstraint#accepts:member",
              "docComment": "/**\n * The kinds of profiles that are accepted in this relationship\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accepts: "
                },
                {
                  "kind": "Reference",
                  "text": "Profile",
                  "canonicalReference": "@datashaper/schema!Profile:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accepts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RelationshipConstraint#description:member",
              "docComment": "/**\n * Description of the named resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RelationshipConstraint#multi:member",
              "docComment": "/**\n * Whether multiple relationships of this kind may be defined on a resource Defaults to false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multi?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multi",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RelationshipConstraint#rel:member",
              "docComment": "/**\n * The relationship definition\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RelationshipConstraint#title:member",
              "docComment": "/**\n * Friendly name of the relationship type. Used for display only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!RenameArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RenameArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputColumnRecordArgs",
              "canonicalReference": "@datashaper/schema!InputColumnRecordArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RenameArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!ResourceSchema:interface",
          "docComment": "/**\n * Parent class for any resource type understood by the system. Any object type that extends from Resource is expected to have a standalone schema published. For project state, this can be left as generic as possible for now.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ResourceSchema extends "
            },
            {
              "kind": "Reference",
              "text": "Named",
              "canonicalReference": "@datashaper/schema!Named:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ResourceSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#$schema:member",
              "docComment": "/**\n * The JSON schema for this resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$schema?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "$schema",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#homepage:member",
              "docComment": "/**\n * URL to a public webpage that describes this resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "homepage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "homepage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#license:member",
              "docComment": "/**\n * SPDX license string. https://spdx.org/licenses/\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "license?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "license",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#path:member",
              "docComment": "/**\n * URI-compliant path to the resource (local or remote). If array-valued, this points to a list of files that comprise the dataset (e.g., for splitting very large tables). URI-compliant path to the referenced resource (local or remote).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#profile:member",
              "docComment": "/**\n * Defines the resource type. Known resource types should have accompanying processors and rendering components. Unknown resource types can be interrogated to determine if the format is understandable by an existing component. Note that this could be inferred from $schema, but a simple string here is easier to deal with in code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile?: "
                },
                {
                  "kind": "Reference",
                  "text": "Profile",
                  "canonicalReference": "@datashaper/schema!Profile:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#rel:member",
              "docComment": "/**\n * The relationship of this resource to the parent resource.\n *\n * Note: If the resource is a profile-free reference object (e.g. { \"rel\": \"input\", \"path\": \"path/to/datatable.json\" },\n *\n * Then the relationship is _external_ the target resource and should not be persisted in the object )\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rel?: "
                },
                {
                  "kind": "Reference",
                  "text": "Rel",
                  "canonicalReference": "@datashaper/schema!Rel:type"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ResourceSchema#sources:member",
              "docComment": "/**\n * List of resources that underlie this resource. This gives us the ability to create hierarchical or linked structures to represent complex combinations. For example, a parent resource can have source tables, a workflow, and a table schema that all combine to create a fully-realized, strongly typed, and transformed output table. Entire Resource objects may be embedded here, or a string path to the Resource definition JSON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sources?: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceSchema",
                  "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!RollupArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RollupArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RollupArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!RollupArgs#operation:member",
              "docComment": "/**\n * Aggregate/rollup operation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operation: "
                },
                {
                  "kind": "Reference",
                  "text": "FieldAggregateOperation",
                  "canonicalReference": "@datashaper/schema!FieldAggregateOperation:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!SampleArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SampleArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "SampleArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SampleArgs#emitRemainder:member",
              "docComment": "/**\n * Whether to preserve and emit the non-sampled records via the 'remainder' output port.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitRemainder?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "emitRemainder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SampleArgs#proportion:member",
              "docComment": "/**\n * If table size is unknown ahead of time, specify a proportion of rows to sample. If size is specified, it will be used instead, otherwise computed from this proportion using the table.numRows()\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "proportion?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "proportion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SampleArgs#seed:member",
              "docComment": "/**\n * The randomization seed to use for sampling to ensure stable sampling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "seed?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "seed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SampleArgs#size:member",
              "docComment": "/**\n * Number of rows to sample from the table. This takes precedence over proportion.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!SelectArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SelectArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SelectArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!SetOp:enum",
          "docComment": "/**\n * Indicates the type of set operation to perform across two collections.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SetOp "
            }
          ],
          "releaseTag": "Public",
          "name": "SetOp",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SetOp.Concat:member",
              "docComment": "/**\n * Concatenate the two collections together\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Concat = "
                },
                {
                  "kind": "Content",
                  "text": "\"concat\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Concat"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SetOp.Difference:member",
              "docComment": "/**\n * Return the difference of the two collections\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Difference = "
                },
                {
                  "kind": "Content",
                  "text": "\"difference\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Difference"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SetOp.Intersect:member",
              "docComment": "/**\n * Return the intersection of the two collections\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Intersect = "
                },
                {
                  "kind": "Content",
                  "text": "\"intersect\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Intersect"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SetOp.Union:member",
              "docComment": "/**\n * Return the union of the two collections\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Union = "
                },
                {
                  "kind": "Content",
                  "text": "\"union\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Union"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!SnapshotArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SnapshotArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "SnapshotArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SnapshotArgs#fileType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fileType: "
                },
                {
                  "kind": "Reference",
                  "text": "FileType",
                  "canonicalReference": "@datashaper/schema!FileType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fileType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SnapshotArgs#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!SortDirection:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SortDirection "
            }
          ],
          "releaseTag": "Public",
          "name": "SortDirection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SortDirection.Ascending:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ascending = "
                },
                {
                  "kind": "Content",
                  "text": "\"asc\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ascending"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!SortDirection.Descending:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Descending = "
                },
                {
                  "kind": "Content",
                  "text": "\"desc\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Descending"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SourcePreservingArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "SourcePreservingArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs#preserveSource:member",
              "docComment": "/**\n * Indicates whether source column(s) should be preserved on operations that normally drop the source(s). E.g., merge, fold, spread, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveSource?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!SpreadArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SpreadArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SpreadArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!SpreadArgs#to:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "to: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "to",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!Step:type",
          "docComment": "/**\n * Specification for step items\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Step = "
            },
            {
              "kind": "Reference",
              "text": "StepJsonCommon",
              "canonicalReference": "@datashaper/schema!StepJsonCommon:interface"
            },
            {
              "kind": "Content",
              "text": " & (({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Aggregate",
              "canonicalReference": "@datashaper/schema!Verb.Aggregate:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "AggregateArgs",
              "canonicalReference": "@datashaper/schema!AggregateArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Bin",
              "canonicalReference": "@datashaper/schema!Verb.Bin:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "BinArgs",
              "canonicalReference": "@datashaper/schema!BinArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Binarize",
              "canonicalReference": "@datashaper/schema!Verb.Binarize:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "BinarizeArgs",
              "canonicalReference": "@datashaper/schema!BinarizeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Boolean",
              "canonicalReference": "@datashaper/schema!Verb.Boolean:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "BooleanArgs",
              "canonicalReference": "@datashaper/schema!BooleanArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Concat",
              "canonicalReference": "@datashaper/schema!Verb.Concat:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "VariadicInput",
              "canonicalReference": "@datashaper/schema!VariadicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Convert",
              "canonicalReference": "@datashaper/schema!Verb.Convert:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "ConvertArgs",
              "canonicalReference": "@datashaper/schema!ConvertArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Copy",
              "canonicalReference": "@datashaper/schema!Verb.Copy:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "CopyArgs",
              "canonicalReference": "@datashaper/schema!CopyArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Dedupe",
              "canonicalReference": "@datashaper/schema!Verb.Dedupe:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "DedupeArgs",
              "canonicalReference": "@datashaper/schema!DedupeArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Derive",
              "canonicalReference": "@datashaper/schema!Verb.Derive:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "DeriveArgs",
              "canonicalReference": "@datashaper/schema!DeriveArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Difference",
              "canonicalReference": "@datashaper/schema!Verb.Difference:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "VariadicInput",
              "canonicalReference": "@datashaper/schema!VariadicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Decode",
              "canonicalReference": "@datashaper/schema!Verb.Decode:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "EncodeDecodeArgs",
              "canonicalReference": "@datashaper/schema!EncodeDecodeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Drop",
              "canonicalReference": "@datashaper/schema!Verb.Drop:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "DropArgs",
              "canonicalReference": "@datashaper/schema!DropArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Encode",
              "canonicalReference": "@datashaper/schema!Verb.Encode:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "EncodeDecodeArgs",
              "canonicalReference": "@datashaper/schema!EncodeDecodeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Erase",
              "canonicalReference": "@datashaper/schema!Verb.Erase:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "EraseArgs",
              "canonicalReference": "@datashaper/schema!EraseArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Fill",
              "canonicalReference": "@datashaper/schema!Verb.Fill:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "FillArgs",
              "canonicalReference": "@datashaper/schema!FillArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Filter",
              "canonicalReference": "@datashaper/schema!Verb.Filter:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "FilterArgs",
              "canonicalReference": "@datashaper/schema!FilterArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Fold",
              "canonicalReference": "@datashaper/schema!Verb.Fold:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "FoldArgs",
              "canonicalReference": "@datashaper/schema!FoldArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Groupby",
              "canonicalReference": "@datashaper/schema!Verb.Groupby:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "GroupbyArgs",
              "canonicalReference": "@datashaper/schema!GroupbyArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Impute",
              "canonicalReference": "@datashaper/schema!Verb.Impute:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "ImputeArgs",
              "canonicalReference": "@datashaper/schema!ImputeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Intersect",
              "canonicalReference": "@datashaper/schema!Verb.Intersect:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "VariadicInput",
              "canonicalReference": "@datashaper/schema!VariadicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Join",
              "canonicalReference": "@datashaper/schema!Verb.Join:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "JoinArgs",
              "canonicalReference": "@datashaper/schema!JoinArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "DualInput",
              "canonicalReference": "@datashaper/schema!DualInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Lookup",
              "canonicalReference": "@datashaper/schema!Verb.Lookup:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "LookupArgs",
              "canonicalReference": "@datashaper/schema!LookupArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "DualInput",
              "canonicalReference": "@datashaper/schema!DualInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Merge",
              "canonicalReference": "@datashaper/schema!Verb.Merge:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "MergeArgs",
              "canonicalReference": "@datashaper/schema!MergeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Print",
              "canonicalReference": "@datashaper/schema!Verb.Print:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "PrintArgs",
              "canonicalReference": "@datashaper/schema!PrintArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Onehot",
              "canonicalReference": "@datashaper/schema!Verb.Onehot:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "OnehotArgs",
              "canonicalReference": "@datashaper/schema!OnehotArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Orderby",
              "canonicalReference": "@datashaper/schema!Verb.Orderby:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "OrderbyArgs",
              "canonicalReference": "@datashaper/schema!OrderbyArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Pivot",
              "canonicalReference": "@datashaper/schema!Verb.Pivot:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "PivotArgs",
              "canonicalReference": "@datashaper/schema!PivotArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Recode",
              "canonicalReference": "@datashaper/schema!Verb.Recode:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "RecodeArgs",
              "canonicalReference": "@datashaper/schema!RecodeArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Rename",
              "canonicalReference": "@datashaper/schema!Verb.Rename:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "RenameArgs",
              "canonicalReference": "@datashaper/schema!RenameArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Rollup",
              "canonicalReference": "@datashaper/schema!Verb.Rollup:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "RollupArgs",
              "canonicalReference": "@datashaper/schema!RollupArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Sample",
              "canonicalReference": "@datashaper/schema!Verb.Sample:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "SampleArgs",
              "canonicalReference": "@datashaper/schema!SampleArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Select",
              "canonicalReference": "@datashaper/schema!Verb.Select:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "SelectArgs",
              "canonicalReference": "@datashaper/schema!SelectArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Spread",
              "canonicalReference": "@datashaper/schema!Verb.Spread:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "SpreadArgs",
              "canonicalReference": "@datashaper/schema!SpreadArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Destructure",
              "canonicalReference": "@datashaper/schema!Verb.Destructure:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "DestructureArgs",
              "canonicalReference": "@datashaper/schema!DestructureArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.StringsReplace",
              "canonicalReference": "@datashaper/schema!Verb.StringsReplace:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "StringsReplaceArgs",
              "canonicalReference": "@datashaper/schema!StringsReplaceArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.StringsLower",
              "canonicalReference": "@datashaper/schema!Verb.StringsLower:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "StringsArgs",
              "canonicalReference": "@datashaper/schema!StringsArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.StringsUpper",
              "canonicalReference": "@datashaper/schema!Verb.StringsUpper:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "StringsArgs",
              "canonicalReference": "@datashaper/schema!StringsArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Unfold",
              "canonicalReference": "@datashaper/schema!Verb.Unfold:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "UnfoldArgs",
              "canonicalReference": "@datashaper/schema!UnfoldArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Ungroup",
              "canonicalReference": "@datashaper/schema!Verb.Ungroup:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Unhot",
              "canonicalReference": "@datashaper/schema!Verb.Unhot:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "UnhotArgs",
              "canonicalReference": "@datashaper/schema!UnhotArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Union",
              "canonicalReference": "@datashaper/schema!Verb.Union:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "VariadicInput",
              "canonicalReference": "@datashaper/schema!VariadicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Unorder",
              "canonicalReference": "@datashaper/schema!Verb.Unorder:member"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Unroll",
              "canonicalReference": "@datashaper/schema!Verb.Unroll:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "UnrollArgs",
              "canonicalReference": "@datashaper/schema!UnrollArgs:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Window",
              "canonicalReference": "@datashaper/schema!Verb.Window:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "WindowArgs",
              "canonicalReference": "@datashaper/schema!WindowArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ") | ({\n    verb: "
            },
            {
              "kind": "Reference",
              "text": "Verb.Workflow",
              "canonicalReference": "@datashaper/schema!Verb.Workflow:member"
            },
            {
              "kind": "Content",
              "text": ";\n    args?: "
            },
            {
              "kind": "Reference",
              "text": "WorkflowArgs",
              "canonicalReference": "@datashaper/schema!WorkflowArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "BasicInput",
              "canonicalReference": "@datashaper/schema!BasicInput:interface"
            },
            {
              "kind": "Content",
              "text": ")\n/**\n * Custom step - we may not know the verb, args, or binding pattern\n */\n | ({\n    verb: string;\n    args?: unknown;\n} & "
            },
            {
              "kind": "Reference",
              "text": "UnknownInput",
              "canonicalReference": "@datashaper/schema!UnknownInput:interface"
            },
            {
              "kind": "Content",
              "text": "))"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Step",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 263
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!StepJsonCommon:interface",
          "docComment": "/**\n * Common step properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StepJsonCommon "
            }
          ],
          "releaseTag": "Public",
          "name": "StepJsonCommon",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!StepJsonCommon#id:member",
              "docComment": "/**\n * A unique identifier for this step\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!StringComparisonOperator:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StringComparisonOperator "
            }
          ],
          "releaseTag": "Public",
          "name": "StringComparisonOperator",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.Contains:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Contains = "
                },
                {
                  "kind": "Content",
                  "text": "\"contains\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Contains"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.EndsWith:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EndsWith = "
                },
                {
                  "kind": "Content",
                  "text": "\"ends with\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EndsWith"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.Equals:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Equals = "
                },
                {
                  "kind": "Content",
                  "text": "\"equals\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Equals"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.IsEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.IsNotEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IsNotEmpty = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not empty\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IsNotEmpty"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.NotEqual:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NotEqual = "
                },
                {
                  "kind": "Content",
                  "text": "\"is not equal\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NotEqual"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.RegularExpression:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RegularExpression = "
                },
                {
                  "kind": "Content",
                  "text": "\"regex\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RegularExpression"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!StringComparisonOperator.StartsWith:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StartsWith = "
                },
                {
                  "kind": "Content",
                  "text": "\"starts with\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StartsWith"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!StringsArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StringsArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StringsArgs",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!StringsReplaceArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StringsReplaceArgs extends "
            },
            {
              "kind": "Reference",
              "text": "StringsArgs",
              "canonicalReference": "@datashaper/schema!StringsArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StringsReplaceArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!StringsReplaceArgs#caseInsensitive:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caseInsensitive?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "caseInsensitive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!StringsReplaceArgs#globalSearch:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalSearch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "globalSearch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!StringsReplaceArgs#pattern:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pattern: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pattern",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!StringsReplaceArgs#replacement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "replacement: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "replacement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!TableBundleSchema:interface",
          "docComment": "/**\n * A table bundle encapsulates table-specific resources into a single resource with a prescribed workflow.\n *\n * A tablebundle requires a `source` entry with rel=\"input\" for the source table. A tablebundle may also include `source` entries with rel=\"codebook\" and rel=\"workflow\" for interpretation and processing of the source data table.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TableBundleSchema extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSchema",
              "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TableBundleSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TableBundleSchema#profile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile: "
                },
                {
                  "kind": "Reference",
                  "text": "KnownProfile.TableBundle",
                  "canonicalReference": "@datashaper/schema!KnownProfile.TableBundle:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!TypeHints:interface",
          "docComment": "/**\n * Configuration values for interpreting data types when parsing a delimited file. By default, all values are read as strings - applying these type hints can derive primitive types from the strings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TypeHints "
            }
          ],
          "releaseTag": "Public",
          "name": "TypeHints",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#arrayDelimiter:member",
              "docComment": "/**\n * The character to use for delimiting arrays.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "arrayDelimiter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "arrayDelimiter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#dataFormat:member",
              "docComment": "/**\n * The data format\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataFormat?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataFormat",
                  "canonicalReference": "@datashaper/schema!DataFormat:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dataFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#dateFormat:member",
              "docComment": "/**\n * Default date format to use when parsing dates. The Codebook can override this at the column level. Default: yyyy-MM-dd TODO: spark has a separate config for datetime. Do we care?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dateFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dateFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#decimal:member",
              "docComment": "/**\n * Character to use when parsing decimal numbers. Default: .\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decimal?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "decimal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#falseValues:member",
              "docComment": "/**\n * Default: case-insensitive word \"false\". Note that if you configure this, pandas considers the custom values case-sensitive. Case-insensitive true/false is always valid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "falseValues?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "falseValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#infinity:member",
              "docComment": "/**\n * Strings to parse as negative and positive infinity. Default: case insensitive [\"-inf\", \"inf\"].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "infinity?: "
                },
                {
                  "kind": "Content",
                  "text": "[string, string]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "infinity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#naValues:member",
              "docComment": "/**\n * Strings to consider NaN or null. Default: ['-1.#IND', '1.#QNAN', '1.#IND', '-1.#QNAN', '#N/A N/A', '#N/A', 'N/A', 'n/a', 'NA', '<NA>', '#NA', 'NULL', 'null', 'NaN', '-NaN', 'nan', '-nan', '']\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "naValues?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "naValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#thousands:member",
              "docComment": "/**\n * For large numbers that have been written with a thousands separator, you can set the thousands keyword to a string of length 1 so that integers will be parsed correctly. By default, numbers with a thousands separator will be parsed as strings. Default: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thousands?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "thousands",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!TypeHints#trueValues:member",
              "docComment": "/**\n * Default: case-insensitive word \"true\". Note that if you configure this, pandas considers the custom values case-sensitive. Case-insensitive true/false is always valid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trueValues?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "trueValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@datashaper/schema!TypeHintsDefaults:var",
          "docComment": "/**\n * This is a collection of default string values for inferring strict types from strings. They replicate the defaults from pandas. https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#csv-text-files\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TypeHintsDefaults: "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TypeHintsDefaults",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!UnfoldArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnfoldArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputKeyValueArgs",
              "canonicalReference": "@datashaper/schema!InputKeyValueArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UnfoldArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!UnhotArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UnhotArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnListArgs",
              "canonicalReference": "@datashaper/schema!InputColumnListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SourcePreservingArgs",
              "canonicalReference": "@datashaper/schema!SourcePreservingArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "UnhotArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!UnhotArgs#prefix:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!UnknownInput:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UnknownInput "
            }
          ],
          "releaseTag": "Public",
          "name": "UnknownInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!UnknownInput#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": " | {\n        source?: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        others?: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!UnrollArgs:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnrollArgs = "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UnrollArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!ValidationFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ValidationFunction = "
            },
            {
              "kind": "Content",
              "text": "(values: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "FieldError",
              "canonicalReference": "@datashaper/schema!FieldError:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValidationFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!ValidationResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ValidationResult "
            }
          ],
          "releaseTag": "Public",
          "name": "ValidationResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!ValidationResult#errors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errors: "
                },
                {
                  "kind": "Reference",
                  "text": "FieldError",
                  "canonicalReference": "@datashaper/schema!FieldError:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!Value:type",
          "docComment": "/**\n * A cell/property value of any type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Value = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Value",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!VariableNature:enum",
          "docComment": "/**\n * Describes the semantic shape of a variable. This has particular effect on how we display and compare data, such as using line charts for continuous versus bar charts for categorical. This mostly applies to numeric variables, but strings for instance can be categorical.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum VariableNature "
            }
          ],
          "releaseTag": "Public",
          "name": "VariableNature",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!VariableNature.Binary:member",
              "docComment": "/**\n * Only two valid values are allowed, commonly 1 = true, 0 = false. If the data type for a column is boolean, this will be the nature. If only two unique strings are present, this will be the nature (e.g., 'Y' and 'N')\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Binary = "
                },
                {
                  "kind": "Content",
                  "text": "\"binary\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Binary"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!VariableNature.Continuous:member",
              "docComment": "/**\n * Continuously variable, i.e., decimal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Continuous = "
                },
                {
                  "kind": "Content",
                  "text": "\"continuous\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Continuous"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!VariableNature.Discrete:member",
              "docComment": "/**\n * Discrete intervals, i.e., whole numbers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Discrete = "
                },
                {
                  "kind": "Content",
                  "text": "\"discrete\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Discrete"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!VariableNature.Nominal:member",
              "docComment": "/**\n * Integers mapped to arbitrary categories where order does not matter. String columns are also normally nominal. For example:\n *\n * Eye color 0: Unknown/missing 1: Green 2: Blue 3: Brown 4: Hazel ...\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Nominal = "
                },
                {
                  "kind": "Content",
                  "text": "\"nominal\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Nominal"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!VariableNature.Ordinal:member",
              "docComment": "/**\n * Integers map to ordered categories. The order matters here because it can be used to indicate progression. For example:\n *\n * Income 0: Unknown/missing 1: No income 2: 1-9999 3: 10000-19999 4: 20000-29999 ...\n *\n * In this case the integer category carries an indication of escalating income range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ordinal = "
                },
                {
                  "kind": "Content",
                  "text": "\"ordinal\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ordinal"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!VariadicInput:interface",
          "docComment": "/**\n * Multi-input, single output step I/O\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VariadicInput "
            }
          ],
          "releaseTag": "Public",
          "name": "VariadicInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!VariadicInput#input:member",
              "docComment": "/**\n * The step inputs; a required \"source\" and optional, variadic \"others\". If this is a string, it is used to bind the primary input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        source: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        others?: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowInput",
                  "canonicalReference": "@datashaper/schema!WorkflowInput:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!Verb:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Verb "
            }
          ],
          "releaseTag": "Public",
          "name": "Verb",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Aggregate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Aggregate = "
                },
                {
                  "kind": "Content",
                  "text": "\"aggregate\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Aggregate"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Bin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Bin = "
                },
                {
                  "kind": "Content",
                  "text": "\"bin\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Bin"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Binarize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Binarize = "
                },
                {
                  "kind": "Content",
                  "text": "\"binarize\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Binarize"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Boolean:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Boolean = "
                },
                {
                  "kind": "Content",
                  "text": "\"boolean\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Boolean"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Concat:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Concat = "
                },
                {
                  "kind": "Content",
                  "text": "\"concat\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Concat"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Convert:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Convert = "
                },
                {
                  "kind": "Content",
                  "text": "\"convert\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Convert"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Copy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Copy = "
                },
                {
                  "kind": "Content",
                  "text": "\"copy\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Copy"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Decode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Decode = "
                },
                {
                  "kind": "Content",
                  "text": "\"decode\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Decode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Dedupe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Dedupe = "
                },
                {
                  "kind": "Content",
                  "text": "\"dedupe\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Dedupe"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Derive:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Derive = "
                },
                {
                  "kind": "Content",
                  "text": "\"derive\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Derive"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Destructure:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Destructure = "
                },
                {
                  "kind": "Content",
                  "text": "\"destructure\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Destructure"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Difference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Difference = "
                },
                {
                  "kind": "Content",
                  "text": "\"difference\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Difference"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Drop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Drop = "
                },
                {
                  "kind": "Content",
                  "text": "\"drop\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Drop"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Encode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Encode = "
                },
                {
                  "kind": "Content",
                  "text": "\"encode\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Encode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Erase:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Erase = "
                },
                {
                  "kind": "Content",
                  "text": "\"erase\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Erase"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Fill:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Fill = "
                },
                {
                  "kind": "Content",
                  "text": "\"fill\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Fill"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Filter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Filter = "
                },
                {
                  "kind": "Content",
                  "text": "\"filter\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Filter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Fold:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Fold = "
                },
                {
                  "kind": "Content",
                  "text": "\"fold\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Fold"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Groupby:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Groupby = "
                },
                {
                  "kind": "Content",
                  "text": "\"groupby\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Groupby"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Impute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Impute = "
                },
                {
                  "kind": "Content",
                  "text": "\"impute\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Impute"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Intersect:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Intersect = "
                },
                {
                  "kind": "Content",
                  "text": "\"intersect\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Intersect"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Join:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Join = "
                },
                {
                  "kind": "Content",
                  "text": "\"join\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Join"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Lookup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Lookup = "
                },
                {
                  "kind": "Content",
                  "text": "\"lookup\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Lookup"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Merge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Merge = "
                },
                {
                  "kind": "Content",
                  "text": "\"merge\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Merge"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Onehot:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Onehot = "
                },
                {
                  "kind": "Content",
                  "text": "\"onehot\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Onehot"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Orderby:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Orderby = "
                },
                {
                  "kind": "Content",
                  "text": "\"orderby\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Orderby"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Pivot:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Pivot = "
                },
                {
                  "kind": "Content",
                  "text": "\"pivot\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Pivot"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Print:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Print = "
                },
                {
                  "kind": "Content",
                  "text": "\"print\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Print"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Recode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Recode = "
                },
                {
                  "kind": "Content",
                  "text": "\"recode\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Recode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Rename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Rename = "
                },
                {
                  "kind": "Content",
                  "text": "\"rename\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Rename"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Rollup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Rollup = "
                },
                {
                  "kind": "Content",
                  "text": "\"rollup\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Rollup"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Sample:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Sample = "
                },
                {
                  "kind": "Content",
                  "text": "\"sample\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Sample"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Select:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Select = "
                },
                {
                  "kind": "Content",
                  "text": "\"select\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Select"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Spread:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Spread = "
                },
                {
                  "kind": "Content",
                  "text": "\"spread\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Spread"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.StringsLower:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StringsLower = "
                },
                {
                  "kind": "Content",
                  "text": "\"strings.lower\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StringsLower"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.StringsReplace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StringsReplace = "
                },
                {
                  "kind": "Content",
                  "text": "\"strings.replace\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StringsReplace"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.StringsUpper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StringsUpper = "
                },
                {
                  "kind": "Content",
                  "text": "\"strings.upper\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StringsUpper"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Unfold:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unfold = "
                },
                {
                  "kind": "Content",
                  "text": "\"unfold\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unfold"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Ungroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ungroup = "
                },
                {
                  "kind": "Content",
                  "text": "\"ungroup\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ungroup"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Unhot:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unhot = "
                },
                {
                  "kind": "Content",
                  "text": "\"unhot\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unhot"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Union:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Union = "
                },
                {
                  "kind": "Content",
                  "text": "\"union\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Union"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Unorder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unorder = "
                },
                {
                  "kind": "Content",
                  "text": "\"unorder\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unorder"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Unroll:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unroll = "
                },
                {
                  "kind": "Content",
                  "text": "\"unroll\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unroll"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Window:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Window = "
                },
                {
                  "kind": "Content",
                  "text": "\"window\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Window"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!Verb.Workflow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Workflow = "
                },
                {
                  "kind": "Content",
                  "text": "\"workflow\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Workflow"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!WindowArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WindowArgs extends "
            },
            {
              "kind": "Reference",
              "text": "InputColumnArgs",
              "canonicalReference": "@datashaper/schema!InputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OutputColumnArgs",
              "canonicalReference": "@datashaper/schema!OutputColumnArgs:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WindowArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!WindowArgs#operation:member",
              "docComment": "/**\n * Window function to apply to the column.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operation: "
                },
                {
                  "kind": "Reference",
                  "text": "WindowFunction",
                  "canonicalReference": "@datashaper/schema!WindowFunction:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@datashaper/schema!WindowFunction:enum",
          "docComment": "/**\n * These are operations that perform windowed compute. See https://uwdata.github.io/arquero/api/op#window-functions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum WindowFunction "
            }
          ],
          "releaseTag": "Public",
          "name": "WindowFunction",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.CumulativeDistribution:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CumulativeDistribution = "
                },
                {
                  "kind": "Content",
                  "text": "\"cume_dist\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CumulativeDistribution"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.FillDown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FillDown = "
                },
                {
                  "kind": "Content",
                  "text": "\"fill_down\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FillDown"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.FillUp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FillUp = "
                },
                {
                  "kind": "Content",
                  "text": "\"fill_up\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FillUp"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.FirstValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FirstValue = "
                },
                {
                  "kind": "Content",
                  "text": "\"first_value\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FirstValue"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.LastValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LastValue = "
                },
                {
                  "kind": "Content",
                  "text": "\"last_value\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LastValue"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.PercentRank:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PercentRank = "
                },
                {
                  "kind": "Content",
                  "text": "\"percent_rank\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PercentRank"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.Rank:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Rank = "
                },
                {
                  "kind": "Content",
                  "text": "\"rank\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Rank"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.RowNumber:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RowNumber = "
                },
                {
                  "kind": "Content",
                  "text": "\"row_number\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RowNumber"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@datashaper/schema!WindowFunction.UUID:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UUID = "
                },
                {
                  "kind": "Content",
                  "text": "\"uuid\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UUID"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!WorkflowArgs:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WorkflowArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkflowArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!WorkflowArgs#workflow:member",
              "docComment": "/**\n * The workflow configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "workflow: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkflowSchema",
                  "canonicalReference": "@datashaper/schema!WorkflowSchema:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "workflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!WorkflowInput:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WorkflowInput = "
            },
            {
              "kind": "Reference",
              "text": "WorkflowStepId",
              "canonicalReference": "@datashaper/schema!WorkflowStepId:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "InputBinding",
              "canonicalReference": "@datashaper/schema!InputBinding:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WorkflowInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/schema!WorkflowSchema:interface",
          "docComment": "/**\n * The root wrangling workflow specification. resource profile: 'workflow'\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WorkflowSchema extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSchema",
              "canonicalReference": "@datashaper/schema!ResourceSchema:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkflowSchema",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!WorkflowSchema#input:member",
              "docComment": "/**\n * A list of input names that are expected to be provided in addition to the workflow steps\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!WorkflowSchema#profile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profile: "
                },
                {
                  "kind": "Content",
                  "text": "'workflow'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/schema!WorkflowSchema#steps:member",
              "docComment": "/**\n * The workflow steps\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "steps?: "
                },
                {
                  "kind": "Reference",
                  "text": "Step",
                  "canonicalReference": "@datashaper/schema!Step:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@datashaper/schema!WorkflowStepId:type",
          "docComment": "/**\n * The Id of the step to which the input is bound\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WorkflowStepId = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WorkflowStepId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
