{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.29.2",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@datashaper/tables!",
  "docComment": "",
  "name": "@datashaper/tables",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@datashaper/tables!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!applyCodebook:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applyCodebook(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", codebook: "
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ", strategy: "
            },
            {
              "kind": "Reference",
              "text": "CodebookStrategy",
              "canonicalReference": "@datashaper/schema!CodebookStrategy:enum"
            },
            {
              "kind": "Content",
              "text": ", dataTableSchema?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "codebook",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "strategy",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "dataTableSchema",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "name": "applyCodebook"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!coerce:function(1)",
          "docComment": "/**\n * Ensure an incoming value matches its datatype. For example, if user input is from a textfield, parse it.\n *\n * @param value - \n *\n * @param dataType - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function coerce(value: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": ", dataType: "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "dataType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "coerce"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!columnIndexesWithZeros:function(1)",
          "docComment": "/**\n * Returns a list of column indices that contain at least one 0.\n *\n * @param table - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function columnIndexesWithZeros(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "columnIndexesWithZeros"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!columnNamesWithZeros:function(1)",
          "docComment": "/**\n * Returns a list of column names that contain at least one 0.\n *\n * @param table - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function columnNamesWithZeros(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "columnNamesWithZeros"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!columnType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function columnType(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", column: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "column",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "columnType"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!columnTypes:function(1)",
          "docComment": "/**\n * Generates column typings info for a table.\n *\n * @param table - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function columnTypes(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", columns?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "columns",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "columnTypes"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!container:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function container(id: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", table?: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", metadata?: "
            },
            {
              "kind": "Reference",
              "text": "TableMetadata",
              "canonicalReference": "@datashaper/tables!TableMetadata:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TableContainer",
              "canonicalReference": "@datashaper/tables!TableContainer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "metadata",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "container"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!determineType:function(1)",
          "docComment": "/**\n * Guess the type of a table value with more discernment than typeof https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n *\n * @param value - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function determineType(value: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "determineType"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!enumValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `enum` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enumValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "enumValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!fixedBinCount:function(1)",
          "docComment": "/**\n * Bins column values using a fixed number of bins. The standard behavior here is to truncate a numeric value to the lower bound of its bin range. This keeps the output numerical but loses information about specific bin boundaries. Because binning is a conversion from continuous to categorical, many use cases prefer an output value that displays the range. The format parameter here will produce a printed string as output.\n *\n * @param column - name of the column to bin\n *\n * @param min - inclusive minimum of the bin range\n *\n * @param max - inclusive maximum of the bin range\n *\n * @param count - number of bins to create, they will be equal width\n *\n * @param clamped - whether values outside of the bin range should be clamped to the bounds. If this is false, out-of-bounds values will be +/-Infinity.\n *\n * @param format - whether to return a formatted string that prints the bin range.\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fixedBinCount(column: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", min: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", count: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", clamped?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", format?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "column",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "count",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "clamped",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            }
          ],
          "name": "fixedBinCount"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!fixedBinStep:function(1)",
          "docComment": "/**\n * Bins column values using a fixed bin width. The number of resulting bins is therefore variable. The standard behavior here is to truncate a numeric value to the lower bound of its bin range. This keeps the output numerical but loses information about specific bin boundaries. Because binning is a conversion from continuous to categorical, many use cases prefer an output value that displays the range. The format parameter here will produce a printed string as output.\n *\n * @param column - name of the column to bin\n *\n * @param min - inclusive minimum of the bin range\n *\n * @param max - inclusive maximum of the bin range\n *\n * @param step - the width each bin should be\n *\n * @param clamped - whether values outside of the bin range should be clamped to the bounds. If this is false, out-of-bounds values will be +/-Infinity.\n *\n * @param format - whether to return a formatted string that prints the bin range.\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fixedBinStep(column: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", min?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", max?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", step?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", clamped?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", format?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "column",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "step",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "clamped",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            }
          ],
          "name": "fixedBinStep"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!format:function(1)",
          "docComment": "/**\n * Returns a nice formatted string for a number\n *\n * @param value - \n *\n * @param options - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function format(value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    minExp?: number;\n    precision?: number;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "format"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!formatIfNumber:function(1)",
          "docComment": "/**\n * Returns a formatted string for a number, otherwise returns the original value\n *\n * @param value - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatIfNumber(value: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "formatIfNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!formatNumberStr:function(1)",
          "docComment": "/**\n * Formats a string using specified numeric parser options, so that it is ready for standard numeric parsing. (i.e., default js impl is to consider '.' a decimal). If the string has invalid construction to be a number, an empty string will be returned, which will be parsed as NaN. We do this because parseInt does not recognize the thousands separator, but if we remove them all even in invalid cases (e.g., '1,00'), invalid numbers could be parsed downstream as valid. The same occurs with decimal separators: parseFloat will ignore anything after the first.\n *\n * @param value - the value to format\n *\n * @param options - formatting options\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatNumberStr(value: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    decimal?: string;\n    thousands?: string;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "formatNumberStr"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!fromCSV:function(1)",
          "docComment": "/**\n * Drop-in replacement for arquero fromCSV, using our internal parsing with auto-typing turned on. Meant for quick-and-dirty reads, with the advantage that our default parsing aligns with pandas. Use readTable for more control over schema options and formats.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromCSV(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "CSVParseOptions",
              "canonicalReference": "arquero!CSVParseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "fromCSV"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!generateCodebook:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateCodebook(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    format?: "
            },
            {
              "kind": "Reference",
              "text": "DataFormat",
              "canonicalReference": "@datashaper/schema!DataFormat:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    autoType?: boolean;\n    autoMax?: number;\n    onInferring?: (column: string) => void;\n    onProgress?: (numComplete: number) => void;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "generateCodebook"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!getDate:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDate(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!getters:function(1)",
          "docComment": "/**\n * Returns a map of all of the column getters for a table.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getters(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, (i: number) => any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getters"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!guessDataType:function(1)",
          "docComment": "/**\n * Factory function to provide a type guessing function for any string value. This uses optional type hints to account for string values such as boolean and null formats.\n *\n * @param options - The type hinting options\n *\n * @returns A function that evaluates the datatype of inputs\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function guessDataType(options?: "
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "guessDataType"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!guessDelimiter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function guessDelimiter(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", config?: "
            },
            {
              "kind": "Reference",
              "text": "ParserOptions",
              "canonicalReference": "@datashaper/schema!ParserOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "guessDelimiter"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!introspect:function(1)",
          "docComment": "/**\n * Performs type inference and stats on a table/columns.\n *\n * @param table - \n *\n * @param detailed - include detailed per-column stats, otherwise just basic types\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function introspect(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", detailed?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", \ncolumns?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TableMetadata",
              "canonicalReference": "@datashaper/tables!TableMetadata:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "detailed",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "columns",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "introspect"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isArray:function(1)",
          "docComment": "/**\n * Detect if a string is an array by looking for the delimiter. It's expected that in a CSV any array cells will be quoted. Also note that if the default delimiter, comma, is used, these may be detected as valid numbers if checked first.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArray(delimiter: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", format: "
            },
            {
              "kind": "Reference",
              "text": "DataFormat",
              "canonicalReference": "@datashaper/schema!DataFormat:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "delimiter",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isBoolean:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBoolean(falseValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", trueValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "falseValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "trueValues",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "isBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isDate:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDate(value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isNull:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNull(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isNull"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNumber(decimal?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", thousands?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decimal",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "thousands",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "isNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isObject(value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!isValidNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidNumber(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isValidNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!loadCSV:function(1)",
          "docComment": "/**\n * Drop-in replacement for arquero loadCSV, using our internal parsing with auto-typing turned on. Meant for quick-and-dirty reads, with the advantage that our default parsing aligns with pandas. Use readTable for more control over schema options and formats.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function loadCSV(url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "CSVParseOptions",
              "canonicalReference": "arquero!CSVParseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "loadCSV"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!maximumValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `maximum` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maximumValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "maximumValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!maxLengthValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `maxLength` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maxLengthValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "maxLengthValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!minimumValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `minimum` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minimumValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "minimumValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!minLengthValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `minLength` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minLengthValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "minLengthValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseArray:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseArray(subtype?: "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": ", delimiter?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: unknown) => any[] | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "subtype",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "delimiter",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "parseArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseAs:function(1)",
          "docComment": "/**\n * Factory function to create a value parser based on defined data type and type hints\n *\n * @param type - the datatype to interpret as\n *\n * @param subtype - the subtype of the datatype (i.e., if the main type is an array)\n *\n * @param hints - type hinting information\n *\n * @returns A parsed value\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseAs(type?: "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ", subtype?: "
            },
            {
              "kind": "Reference",
              "text": "DataType",
              "canonicalReference": "@datashaper/schema!DataType:enum"
            },
            {
              "kind": "Content",
              "text": ", hints?: "
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@datashaper/schema!Value:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subtype",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "hints",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "parseAs"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseBoolean:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseBoolean(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", trueValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", falseValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | undefined) => boolean | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "trueValues",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "falseValues",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "parseBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseDate:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseDate(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "parseDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseNumber(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", decimal?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", thousands?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(values: string | undefined) => number | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "decimal",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "thousands",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "parseNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseObject(options?: "
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | undefined) => object | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "parseObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseString:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseString(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | undefined) => string | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "parseString"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!parseUndefined:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseUndefined(naValues?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(value: string | undefined) => undefined | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "naValues",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "parseUndefined"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!patternValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `pattern` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function patternValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "patternValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!readTable:function(1)",
          "docComment": "/**\n * Read an input table\n *\n * @param input - The input blob\n *\n * @param schema - The dataTableSchema with format, shape and parser of the table\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function readTable(input: "
            },
            {
              "kind": "Reference",
              "text": "Blob",
              "canonicalReference": "!Blob:interface"
            },
            {
              "kind": "Content",
              "text": " | string | undefined"
            },
            {
              "kind": "Content",
              "text": ", schema: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "ReadTableOptions",
              "canonicalReference": "@datashaper/tables!ReadTableOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": " | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "schema",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "readTable"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/tables!ReadTableOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReadTableOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ReadTableOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!ReadTableOptions#autoMax:member",
              "docComment": "/**\n * If autoType is true, we'll limit the rows we check to this number to avoid scanning the entire table. This is ignored if a codebook is supplied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoMax?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoMax",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!ReadTableOptions#autoType:member",
              "docComment": "/**\n * If true, we'll try to auto-detect the type of each column. This is ignored if a codebook is supplied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoType?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!ReadTableOptions#codebook:member",
              "docComment": "/**\n * If a codebook is supplied, we'll use this for type casting.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "codebook?: "
                },
                {
                  "kind": "Reference",
                  "text": "CodebookSchema",
                  "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "codebook",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!requiredValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `required` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function requiredValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "requiredValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!rows:function(1)",
          "docComment": "/**\n * Returns a table's rows as a two-dimensional array.\n *\n * @param table - \n *\n * @param options - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rows(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "RowsOptions",
              "canonicalReference": "@datashaper/tables!RowsOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any[][]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "rows"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/tables!RowsOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RowsOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "RowsOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!RowsOptions#format:member",
              "docComment": "/**\n * Map of custom formatting functions per column.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, ((d: any) => any) | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!RowsOptions#skipHeader:member",
              "docComment": "/**\n * Indicates whether to skip the column headers as first row.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipHeader?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!RowsOptions#stringify:member",
              "docComment": "/**\n * Indicates whether to save each cell value as a string. Note that this just wraps in a template and does not attempt any formatting.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stringify?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stringify",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!sliceTable:function(1)",
          "docComment": "/**\n * Safely applies slicing args to a table\n *\n * @param table - the input table\n *\n * @param offset - the row offset\n *\n * @param limit - the row limit\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sliceTable(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", offset: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", limit: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "limit",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "sliceTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!stats:function(1)",
          "docComment": "/**\n * Generates detailed column stats for a table.\n *\n * @param table - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stats(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", columns?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "FieldMetadata",
              "canonicalReference": "@datashaper/schema!FieldMetadata:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "columns",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "stats"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/tables!TableContainer:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TableContainer<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "TableContainer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableContainer#context:member",
              "docComment": "/**\n * Optional contextual data about the table. For example, if the table was created using a process/transformation that has additional information to relay, that context can be stored here.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableContainer#id:member",
              "docComment": "/**\n * This is the formal id for a table, and must be unique within the store. A URI would normally be appropriate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableContainer#metadata:member",
              "docComment": "/**\n * Optional metadata block for the table. This can follow the container around to help avoid recomputes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "TableMetadata",
                  "canonicalReference": "@datashaper/tables!TableMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableContainer#table:member",
              "docComment": "/**\n * This is the actual Arquero table instance to store. If it has not been resolved yet it will be undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "table?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColumnTable",
                  "canonicalReference": "arquero!default:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "table",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@datashaper/tables!TableMetadata:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TableMetadata "
            }
          ],
          "releaseTag": "Public",
          "name": "TableMetadata",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableMetadata#cols:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cols: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cols",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableMetadata#columns:member",
              "docComment": "/**\n * Metadata for each column\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columns: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "FieldMetadata",
                  "canonicalReference": "@datashaper/schema!FieldMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "columns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@datashaper/tables!TableMetadata#rows:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rows: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!typeGuesserFactory:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function typeGuesserFactory(options?: "
            },
            {
              "kind": "Reference",
              "text": "TypeHints",
              "canonicalReference": "@datashaper/schema!TypeHints:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    isNull: (value: unknown) => boolean;\n    isBoolean: (value: unknown) => boolean;\n    isNumber: (value: unknown) => boolean;\n    isArray: (value: unknown) => boolean;\n    isObject: (value: unknown) => boolean;\n    isDate: (value: unknown) => boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "typeGuesserFactory"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!unapplyCodebook:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unapplyCodebook(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", codebook: "
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ", strategy: "
            },
            {
              "kind": "Reference",
              "text": "CodebookStrategy",
              "canonicalReference": "@datashaper/schema!CodebookStrategy:enum"
            },
            {
              "kind": "Content",
              "text": ", dataTableSchema?: "
            },
            {
              "kind": "Reference",
              "text": "DataTableSchema",
              "canonicalReference": "@datashaper/schema!DataTableSchema:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "codebook",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "strategy",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "dataTableSchema",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "unapplyCodebook"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!uniqueValidator:function(1)",
          "docComment": "/**\n * Constructs a function that validates a column against the `unique` constraint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniqueValidator(field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationFunction",
              "canonicalReference": "@datashaper/schema!ValidationFunction:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "uniqueValidator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!validateColumn:function(1)",
          "docComment": "/**\n * Validates a column against a Field definition's constraints.\n *\n * @param table - the table to validate\n *\n * @param name - the name of the column\n *\n * @param dataType - the type of the column\n *\n * @param constraints - the field constraints to validate against\n *\n * @param includeIndexes - indicate whether to include the indexes of the row instances that failed validation\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validateColumn(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", field: "
            },
            {
              "kind": "Reference",
              "text": "Field",
              "canonicalReference": "@datashaper/schema!Field:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationResult",
              "canonicalReference": "@datashaper/schema!ValidationResult:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "field",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "validateColumn"
        },
        {
          "kind": "Function",
          "canonicalReference": "@datashaper/tables!validateTable:function(1)",
          "docComment": "/**\n * Validates an entire table against a codebook's Field constraints.\n *\n * @param table - the table to validate\n *\n * @param codebook - the codebook to use\n *\n * @param includeIndexes - indicate whether to include the indexes of the rows that failed validation for each field\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validateTable(table: "
            },
            {
              "kind": "Reference",
              "text": "ColumnTable",
              "canonicalReference": "arquero!default:class"
            },
            {
              "kind": "Content",
              "text": ", codebook: "
            },
            {
              "kind": "Reference",
              "text": "CodebookSchema",
              "canonicalReference": "@datashaper/schema!CodebookSchema:interface"
            },
            {
              "kind": "Content",
              "text": ", includeIndexes?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ValidationResult",
              "canonicalReference": "@datashaper/schema!ValidationResult:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "table",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "codebook",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "includeIndexes",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "validateTable"
        }
      ]
    }
  ]
}
