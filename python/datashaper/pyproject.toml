[tool.poetry]
name = "datashaper"
version = "0.0.34"
description = "This project provides a collection of utilities for doing lightweight data wrangling."
authors = [
    "Nathan Evans <naevans@microsoft.com>",
    "Andres Morales <andresmor@microsoft.com>",
]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<4"
pandas = "^2.2.0"
jsonschema = "^4.21.1"
pyarrow = "^15.0.0"

[tool.poetry.group.dev.dependencies]
codespell = "^2.2.6"
poethepoet = "^0.24.4"
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
semversioner = "^2.0.1"
toml = "^0.10.2"
coverage = "^7.4.0"
pyright = "^1.1.349"
pytest-asyncio = "^0.23.4"
ruff = "^0.2.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ["tests/*", ".*", "data/*"]

[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix ."
_format_code = "ruff format ."
_format_check = 'ruff format . --check'
_ruff_check = 'ruff check .'
_codespell = 'codespell dodiscover/ doc/ examples/ --ignore-words=.codespellignore --skip "**/_build/*,**/auto_examples/*"'
_changelog = 'semversioner changelog > CHANGELOG.md'
_apply_version = 'semversioner release'
_test_with_coverage = 'coverage run -m pytest'
_coverage_report = 'coverage report --show-missing'
_pyright = "pyright"

# Pass in a test pattern
test_only = "pytest -k"
fix = "ruff check --fix ."

[[tool.poe.tasks.format]]
sequence = ['_sort_imports', '_format_code']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.test]]
sequence = ['_test_with_coverage', '_coverage_report']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.check]]
sequence = ['_format_check', '_ruff_check', '_pyright', '_codespell']
ignore_fail = 'return_non_zero'

[tool.pydocstyle]
match = '^(?!setup|__init__|test_).*\.py'
match-dir = '^datashaper.*'

[tool.pytest]
asyncio_mode = "auto"

[tool.pyright]
include = ["datashaper"]
exclude = ["**/node_modules", "**/__pycache__"]

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
select = [
    "E4", "E7", "E9",
    "F", # Pyflakes https://docs.astral.sh/ruff/rules/#pyflakes-fd    
    "D", # pydocstyle
    "W291", # No trailing whitespace
    #"C90", # Mccabe Complexity
    "I", # Isort
    "N", # Naming Conventions
    "UP", # pyupgrade - use modern conventions
    "YTT", # Correct sys.version_info usage
    # "ANN", # Type Annotations
    "ASYNC", # Async Functions
    "S", # Bandit (security)
    # "BLE", # Don't catch blind exceptions,
    # "FBT", # use named arguments for boolean flags
    "B", # Bugbear, design issues
    # "A", # Don't shadow builtins
    # "C4", # Comprehension checks
    "DTZ", # Datetime checks
    "T10", # Remove debug statements
    # "EM", # Error messages
    "ICN", # Import Conventions
    "G", # Logging Formats
    "INP", # check for missing __init__.py
    "PIE", # flake8-pie - misc lints
    # "T20", # no print statements
    "PYI", # stub files
    # "PT", # testing style
    "Q", # consistent quoting
    # "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # no external member access
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-ctype-checking
    "INT",
    "ARG",
    "PTH",
    # "TD", # todos
    # "FIX", # fixme
    # "ERA", # no commented-out code
    "PD", # Pandas,
    # "TRY",
    # "FLY",
    # "PERF",
    # "FURB",
    # "LOG",
    # "RUF"
]
ignore = [
    # Deprecated Rules
    "ANN101",
    "ANN102",
    # Conflicts with interface argument checking
    "ARG002",
    # Not really necessary
    "ANN204",
    "PYI041",
    # Conflicts with our Pandas usage
    "PD002",
    "PD010",
    "PD013",
    # Testing idioms
    "PT009",
    # TODO RE-Enable when we overhaul exceptions
    "EM101",
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "ANN"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "id", "bytes"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"