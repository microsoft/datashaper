{"version":3,"file":"742.2d2f72df.iframe.bundle.js","mappings":";;;;;AAYA;;AAGA;;;;;;;AAOA;;;;AAIA;;;;;;;;;;;;AAYA;;;;;ACFA","sources":["webpack://@datashaper/stories/../../.yarn/__virtual__/@essex-components-virtual-972f491a7f/0/cache/@essex-components-npm-3.6.11-e085d0ba51-f6703db9a8.zip/node_modules/@essex/components/dist/MarkdownBrowser/MarkdownBrowser.styles.js","webpack://@datashaper/stories/../../.yarn/__virtual__/@essex-components-virtual-972f491a7f/0/cache/@essex-components-npm-3.6.11-e085d0ba51-f6703db9a8.zip/node_modules/@essex/components/dist/MarkdownBrowser/MarkdownBrowser.hooks.js"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import styled from '@essex/styled-components';\nimport { useTheme } from '@fluentui/react';\nimport Markdown from 'markdown-to-jsx';\nimport { useMemo } from 'react';\nexport const Container = styled.div`\n    overflow-y: auto;\n    height: 100%;\n    width: 100%;\n`;\nexport const Navigation = styled.div`\n    float: right;\n`;\nexport const MarkdownContainer = styled(Markdown)`\n    *:first-child {\n        margin-top: 0;\n    }\n    \n    h1 {\n        text-transform: uppercase;\n        color: ${({ theme  })=>theme.palette.neutralTertiary};\n    }\n\n    h2 {\n        color: ${({ theme  })=>theme.palette.neutralTertiary};\n    }\n\n    table {\n        border-collapse: collapse;\n\n        th {\n            font-weight: bold;\n        }\n\n        td,\n        th {\n            border: 1px solid ${({ theme  })=>theme.palette.neutralTertiaryAlt};\n            padding: 5px;\n            text-align: center;\n        }\n    }\n`;\nexport function useIconButtonStyles() {\n    const theme = useTheme();\n    return useMemo(()=>({\n            root: {\n                color: theme.palette.neutralPrimaryAlt\n            },\n            rootDisabled: {\n                backgroundColor: 'none'\n            }\n        }), [\n        theme\n    ]);\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import merge from 'lodash-es/merge.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIconButtonStyles } from './MarkdownBrowser.styles.js';\nexport function useHistory(home) {\n    const [stack, setStack] = useState([]);\n    // reset the stack and go to the original\n    const goHome = useCallback(()=>setStack(home ? [\n            home\n        ] : []), [\n        home\n    ]);\n    const goBack = useCallback(()=>setStack((prev)=>prev.length > 1 ? prev.slice(0, -1) : prev), []);\n    const goForward = useCallback((to)=>setStack((prev)=>[\n                ...prev,\n                to\n            ]), []);\n    useEffect(()=>setStack(home ? [\n            home\n        ] : []), [\n        home\n    ]);\n    return {\n        current: stack[stack.length - 1],\n        goHome: stack.length > 1 ? goHome : undefined,\n        goBack: stack.length > 1 ? goBack : undefined,\n        goForward\n    };\n}\n/**\n * Override link click behavior to intercept relative links.\n * @param container\n * @param goForward\n * @param current\n */ export function useLinkNavigation(parent, href, goForward) {\n    return useCallback((event)=>{\n        event.preventDefault();\n        // if the link is not relative, open in a new window\n        if (isExternalLink(href)) {\n            return window.open(href, '_blank');\n        }\n        // otherwise, navigate to the relative link\n        const name = parseRelativePath(href, parent);\n        if (name) {\n            goForward(name);\n        }\n    }, [\n        parent,\n        href,\n        goForward\n    ]);\n}\nexport function useIconButtonProps(iconName, onClick, overrides) {\n    const styles = useIconButtonStyles();\n    return useMemo(()=>{\n        return merge({\n            disabled: !onClick,\n            styles,\n            iconProps: {\n                iconName\n            },\n            ariaLabel: iconName,\n            onClick\n        }, overrides);\n    }, [\n        styles,\n        iconName,\n        onClick,\n        overrides\n    ]);\n}\n/**\n * Construct the props for an icon\n * specific to external links.\n * @param url\n */ export function useLinkIconProps(url) {\n    return useMemo(()=>({\n            styles: {\n                root: {\n                    marginLeft: 2,\n                    fontSize: '0.8em',\n                    width: '0.8em',\n                    height: '0.8em'\n                }\n            },\n            iconName: 'NavigateExternalInline',\n            // we have to provide separate click handling for the icon\n            onClick: ()=>window.open(url, '_blank')\n        }), [\n        url\n    ]);\n}\n// We have to do a little housekeeping on the paths to navigate relative content\n// The content must use \".\" to separate paths in order to be JS-compliant,\n// we want to look for nested paths and align them with the parent\n// to ensure the entire structure remains intact as a key into the content index\nfunction parseRelativePath(path, parent) {\n    const relative = path.replace(window.location.origin, '').replace(/.md/, '');\n    const parts = relative.split('/');\n    const parentParts = parent.split(/\\./g);\n    // sibling, push it into the same \"folder\"\n    if (parts[0] === '.') {\n        return [\n            ...parentParts.slice(0, parentParts.length - 1),\n            ...parts.slice(1)\n        ].join('.');\n    }\n    // if it's nested deeper, slice out the correct number of levels\n    const levels = parts.filter((p)=>p === '..').length;\n    if (levels > 0) {\n        return [\n            ...parentParts.slice(0, parentParts.length - (levels + 1)),\n            ...parts.slice(levels)\n        ].join('.');\n    }\n    // fallback for unaccounted for path structures\n    return relative.replace(/\\//g, '.');\n}\n/**\n * Relative paths should either include the origin or have no protocol.\n * @param url\n * @returns\n */ export function isExternalLink(url) {\n    if (url.includes(':')) {\n        return !url.includes(window.location.origin);\n    }\n    return false;\n}\n"],"names":[],"sourceRoot":""}