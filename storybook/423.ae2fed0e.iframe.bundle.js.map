{"version":3,"file":"423.ae2fed0e.iframe.bundle.js","mappings":";;;;AAYA;;;AAKA;;;;;AAKA;AAGA;;;AAKA;;AAIA;;AAIA;;;;ACKA;;;;AC/BA;;;;AAKA;;;;ACMA;;;ACPA;;;;AC2CA;;;AChDA;;;ACAA;;;;AAMA;;;AC8EA;;;;;AAOA;;;ACqDA;;;;AAMA;;;;AAMA;;;AC3JA;;;;AAMA;;AAIA;;;;;AAKA;AAGA;;;;ACWA;;ACxBA;;;;AAMA;;;;;AAOA;;;;;ACNA;;;ACHA;;ACNA;;;;AAAA","sources":["webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/FilterFunction.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/FilterFunction.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/FilterForm/FilterForm.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/FilterForm/FilterForm.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/SetOperationForm/SetOperationForm.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/SetOperationForm/SetOperationForm.hooks.tsx","webpack://@datashaper/stories/../react/src/components/controls/SortInstruction/SortInstruction.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/OrderbyForm/OrderbyForm.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/RecodeForm/RecodeForm.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/RenameForm/RenameForm.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/SampleForm/Sample.styles.tsx","webpack://@datashaper/stories/../react/src/components/StepForm/StepForm.tsx","webpack://@datashaper/stories/../react/src/components/controls/CalendarPicker/CalendarPicker.styles.ts","webpack://@datashaper/stories/../react/src/components/controls/CalendarPicker/CalendarPicker.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/DataTypeField.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/DataTypeField.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label, TextField, Toggle } from '@fluentui/react'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const TextValue = styled(TextField as any)`\n\tdisplay: inline;\n\twidth: 135px;\n`\n\nexport const OrLabel = styled(Label as any)`\n\tdisplay: inline;\n\tfont-style: italic;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n\tborder-left: 1px solid ${({ theme }) => theme.palette.neutralTertiaryAlt};\n`\n\nexport const FilterContainer = styled.div`\n\tmargin-top: 8px;\n\tmargin-left: 16px;\n`\n\nexport const BooleanToggle = styled(Toggle as any)`\n\tmargin-top: 5px;\n`\n\nexport const InputLabel = styled.div`\n\twidth: 68px;\n`\n\nexport const Input = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tBooleanComparisonOperator,\n\tDataType,\n\tDateComparisonOperator,\n\tFilterCompareType,\n\tNumericComparisonOperator,\n\tStringComparisonOperator,\n} from '@datashaper/schema'\nimport { EnumDropdown } from '@essex/components'\nimport type { IComboBoxOption, IDropdownOption } from '@fluentui/react'\nimport { IconButton, SpinButton } from '@fluentui/react'\nimport { memo, useCallback, useMemo, useState } from 'react'\n\nimport {\n\tuseColumnNames,\n\tuseSimpleDropdownOptions,\n} from '../../../../hooks/index.js'\nimport {\n\tCalendarPicker,\n\tColumnCriteriaComboBox,\n} from '../../../controls/index.js'\nimport { dropdownStyles, narrowDropdownStyles } from '../../../styles.js'\nimport { InputExplainer, LeftAlignedRow } from '../styles.js'\nimport { useColumnTyping, useIsEmpty } from './FilterFunction.hooks.js'\nimport {\n\tBooleanToggle,\n\tContainer,\n\tFilterContainer,\n\tInput,\n\tInputLabel,\n\tOrLabel,\n\tTextValue,\n} from './FilterFunction.styles.js'\nimport type { FilterFunctionProps } from './FilterFunction.types.js'\n\n/**\n * Just the comparison logic/ops for a filter.\n * Input table and source column is expected to be edited elsewhere and configured as the step input.\n * This is split out from FilterInputs to allow just the comparison logic to be reused elsewhere.\n */\nexport const FilterFunction: React.FC<FilterFunctionProps> = memo(\n\tfunction FilterFunction({ table, column, criterion, onChange }) {\n\t\tconst handleOpChange = useCallback(\n\t\t\t(_e: React.FormEvent<HTMLDivElement>, opt?: IDropdownOption) => {\n\t\t\t\tonChange?.({\n\t\t\t\t\t...criterion,\n\t\t\t\t\toperator: opt?.key as\n\t\t\t\t\t\t| StringComparisonOperator\n\t\t\t\t\t\t| NumericComparisonOperator\n\t\t\t\t\t\t| BooleanComparisonOperator\n\t\t\t\t\t\t| DateComparisonOperator,\n\t\t\t\t})\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onSelectDate = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\tvalue: date,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\t\t\t\tsetCleanLabel(false)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst handleDateComboBoxChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: any,\n\t\t\t\toption: IComboBoxOption | undefined,\n\t\t\t\t_index: number | undefined,\n\t\t\t\tvalue: string | undefined,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Column,\n\t\t\t\t\tvalue: option ? option.key : value,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\n\t\t\t\tsetCleanLabel(true)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst handleComboBoxChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: any,\n\t\t\t\toption: IComboBoxOption | undefined,\n\t\t\t\t_index: number | undefined,\n\t\t\t\tvalue: string | undefined,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Column,\n\t\t\t\t\tvalue: option ? option.key : value,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onChangeTextFieldValue = useCallback(\n\t\t\t(\n\t\t\t\t_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst spinButtonOnChange = useCallback(\n\t\t\t(_event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n\t\t\t\tif (newValue != null) {\n\t\t\t\t\tconst update = {\n\t\t\t\t\t\t...criterion,\n\t\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\t\tvalue: newValue,\n\t\t\t\t\t}\n\t\t\t\t\tonChange?.(update)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onToggleChange = (\n\t\t\t_ev: React.MouseEvent<HTMLElement>,\n\t\t\tchecked?: boolean,\n\t\t) => {\n\t\t\tconst update = {\n\t\t\t\t...criterion,\n\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\tvalue: checked,\n\t\t\t}\n\t\t\tonChange?.(update)\n\t\t}\n\n\t\tconst { type, columnFilter } = useColumnTyping(table, column)\n\t\tconst [cleanLabel, setCleanLabel] = useState<boolean>(false)\n\n\t\tconst operatorDropdown = useMemo(() => {\n\t\t\tconst shared = {\n\t\t\t\tlabel: '',\n\t\t\t\tplaceholder: 'Choose',\n\t\t\t\tselectedKey: criterion.operator,\n\t\t\t\tonChange: handleOpChange,\n\t\t\t\tstyles: dropdownStyles,\n\t\t\t}\n\t\t\tif (column) {\n\t\t\t\tif (type === DataType.String) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={StringComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t} else if (type === DataType.Boolean) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={BooleanComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t} else if (type === DataType.Date) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={DateComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// map to nicer \"math like\" terse labels for numeric operations\n\t\t\t// (the default will use the friendly enum keys)\n\t\t\tconst labels = {\n\t\t\t\t'=': '=',\n\t\t\t\t'!=': '!=',\n\t\t\t\t'<': '<',\n\t\t\t\t'<=': '<=',\n\t\t\t\t'>': '>',\n\t\t\t\t'>=': '>=',\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<EnumDropdown\n\t\t\t\t\tenumeration={NumericComparisonOperator}\n\t\t\t\t\t{...shared}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t/>\n\t\t\t)\n\t\t}, [type, column, criterion, handleOpChange])\n\n\t\tconst isEmpty = useIsEmpty(criterion)\n\t\tconst handleDeleteClick = useCallback(() => onChange?.(), [onChange])\n\t\tconst columns = useColumnNames(table, columnFilter)\n\t\tconst columnOptions = useSimpleDropdownOptions(columns)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<LeftAlignedRow>\n\t\t\t\t\t{operatorDropdown}\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this criterion'}\n\t\t\t\t\t\ticonProps={deleteIconProps}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\n\t\t\t\t<FilterContainer>\n\t\t\t\t\t<Input>\n\t\t\t\t\t\t<InputLabel>value</InputLabel>\n\t\t\t\t\t\t{type === DataType.Date ? (\n\t\t\t\t\t\t\t<CalendarPicker\n\t\t\t\t\t\t\t\tonSelectDate={onSelectDate}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t\tcleanLabel={cleanLabel}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.String ? (\n\t\t\t\t\t\t\t<TextValue\n\t\t\t\t\t\t\t\tvalue={criterion.value}\n\t\t\t\t\t\t\t\tonChange={onChangeTextFieldValue}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.Number ? (\n\t\t\t\t\t\t\t<SpinButton\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\tvalue={criterion.value}\n\t\t\t\t\t\t\t\tstyles={narrowDropdownStyles}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t\tonChange={spinButtonOnChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.Boolean ? (\n\t\t\t\t\t\t\t<BooleanToggle\n\t\t\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t\t\t\tonText='True'\n\t\t\t\t\t\t\t\toffText='False'\n\t\t\t\t\t\t\t\tonChange={onToggleChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</Input>\n\t\t\t\t\t<OrLabel>or</OrLabel>\n\t\t\t\t\t<Input>\n\t\t\t\t\t\t<InputLabel>column</InputLabel>\n\t\t\t\t\t\t{type === DataType.Date ? (\n\t\t\t\t\t\t\t<ColumnCriteriaComboBox\n\t\t\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\t\t\tonChange={handleDateComboBoxChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ColumnCriteriaComboBox\n\t\t\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\t\t\tonChange={handleComboBoxChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Input>\n\t\t\t\t</FilterContainer>\n\n\t\t\t\t{type === DataType.String ? (\n\t\t\t\t\t<InputExplainer>\n\t\t\t\t\t\tString comparisons are not case-sensitive\n\t\t\t\t\t</InputExplainer>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst deleteIconProps = { iconName: 'Delete' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nexport const Criteria = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 20px;\n`\nexport const Vertical = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Criterion, FilterArgs } from '@datashaper/schema'\nimport { BooleanOperator } from '@datashaper/schema'\nimport { EnumDropdown } from '@essex/components'\nimport { ActionButton, Label } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback } from 'react'\n\nimport { EMPTY_ARRAY } from '../../../../empty.js'\nimport {\n\tuseDropdownChangeHandler,\n\tuseStepInputTable,\n} from '../../../../hooks/index.js'\nimport { FilterFunction } from '../shared/index.js'\nimport { LeftAlignedRow } from '../styles.js'\nimport type { StepFormProps } from '../types.js'\nimport { Container, Criteria, Vertical } from './FilterForm.styles.js'\n\n/**\n * Provides inputs for a Filter step.\n */\nexport const FilterForm: React.FC<StepFormProps<FilterArgs>> = memo(\n\tfunction FilterForm({ step, workflow, input, table, onChange }) {\n\t\tconst dataTable = useStepInputTable(step, workflow, input, table)\n\t\tconst handleButtonClick = useCallback(() => {\n\t\t\tonChange?.({\n\t\t\t\t...step,\n\t\t\t\targs: {\n\t\t\t\t\t...step.args,\n\t\t\t\t\tcriteria: [...(step.args.criteria || EMPTY_ARRAY), {} as Criterion],\n\t\t\t\t},\n\t\t\t})\n\t\t}, [step, onChange])\n\n\t\tconst handleFilterChange = useCallback(\n\t\t\t(criterion: Criterion | undefined, index: number) => {\n\t\t\t\tconst criteria = [...step.args.criteria]\n\t\t\t\tif (criterion == null) {\n\t\t\t\t\tcriteria.splice(index, 1)\n\t\t\t\t} else {\n\t\t\t\t\tcriteria[index] = criterion\n\t\t\t\t}\n\t\t\t\tonChange?.({\n\t\t\t\t\t...step,\n\t\t\t\t\targs: {\n\t\t\t\t\t\t...step.args,\n\t\t\t\t\t\tcriteria,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t},\n\t\t\t[step, onChange],\n\t\t)\n\n\t\tconst handleLogicalChange = useDropdownChangeHandler(\n\t\t\tstep,\n\t\t\t(s, val) => {\n\t\t\t\ts.args.logical = val as BooleanOperator\n\t\t\t},\n\t\t\tonChange,\n\t\t)\n\t\tconst filters = useFilters(\n\t\t\tdataTable,\n\t\t\tstep.args.column,\n\t\t\tstep.args.criteria,\n\t\t\thandleFilterChange,\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Label>Function</Label>\n\t\t\t\t<Criteria>{filters}</Criteria>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={addIconProps}\n\t\t\t\t\tdisabled={!dataTable}\n\t\t\t\t>\n\t\t\t\t\tAdd criteria\n\t\t\t\t</ActionButton>\n\t\t\t\t{step.args.criteria.length > 1 ? (\n\t\t\t\t\t<LeftAlignedRow>\n\t\t\t\t\t\t<EnumDropdown\n\t\t\t\t\t\t\tlabel={'Logical combination'}\n\t\t\t\t\t\t\tplaceholder={'Choose boolean'}\n\t\t\t\t\t\t\tenumeration={BooleanOperator}\n\t\t\t\t\t\t\tlabels={{\n\t\t\t\t\t\t\t\tor: 'OR',\n\t\t\t\t\t\t\t\tand: 'AND',\n\t\t\t\t\t\t\t\tnor: 'NOR',\n\t\t\t\t\t\t\t\tnand: 'NAND',\n\t\t\t\t\t\t\t\txor: 'XOR',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tselectedKey={step.args.logical}\n\t\t\t\t\t\t\tonChange={handleLogicalChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LeftAlignedRow>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useFilters(\n\ttable: ColumnTable | undefined,\n\tcolumn: string,\n\tcriteria: Criterion[],\n\tonChange: any,\n) {\n\tif (!table) {\n\t\treturn null\n\t}\n\n\treturn criteria.map((criterion, index) => {\n\t\tconst handleChange = (f?: Criterion) => onChange(f, index)\n\t\treturn (\n\t\t\t<Vertical key={`filter-function-${index}`}>\n\t\t\t\t<FilterFunction\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tcriterion={criterion}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t</Vertical>\n\t\t)\n\t})\n}\n\nconst addIconProps = { iconName: 'Add' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n\tdelete: { iconName: 'Delete' },\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Tables = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step, Workflow } from '@datashaper/workflow'\nimport { IconButton } from '@fluentui/react'\nimport { useMemo } from 'react'\n\nimport { useTableDropdownOptions } from '../../../../hooks/index.js'\nimport { TableDropdown } from '../../../controls/index.js'\nimport { LeftAlignedRow } from '../styles.js'\nimport { icons } from './SetOperationForm.styles.js'\n\nexport function useOthers(\n\tstep: Step,\n\tonChange?: (step: Step) => void,\n\tstore?: Workflow,\n): (JSX.Element | null)[] {\n\tconst tableOptions = useTableDropdownOptions(store)\n\treturn useMemo<(JSX.Element | null)[]>(() => {\n\t\treturn (step.input.others || EMPTY).map((input, index) => {\n\t\t\t// on delete, remove the input\n\t\t\tconst handleDeleteClick = () => {\n\t\t\t\tonChange?.({\n\t\t\t\t\t...step,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t...step.input,\n\t\t\t\t\t\tothers: (step.input.others || EMPTY).filter((o) => o !== input),\n\t\t\t\t\t} as Step['input'],\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (!store) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<LeftAlignedRow key={`set-op-${input}-${index}`}>\n\t\t\t\t\t<TableDropdown\n\t\t\t\t\t\tlabel={''}\n\t\t\t\t\t\toptions={tableOptions}\n\t\t\t\t\t\tselectedKey={input}\n\t\t\t\t\t\tonChange={(_evt, option) => {\n\t\t\t\t\t\t\tconst update = { ...step }\n\t\t\t\t\t\t\tif (option) {\n\t\t\t\t\t\t\t\tinput.node = `${option.key}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonChange?.(update)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this table'}\n\t\t\t\t\t\ticonProps={icons.delete}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\t\t\t)\n\t\t})\n\t}, [step, store, tableOptions, onChange])\n}\n\nconst EMPTY: any[] = []\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nexport const icons = {\n\tdelete: { iconName: 'Delete' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Sorts = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RecodeArgs, Value } from '@datashaper/schema'\nimport { DataType } from '@datashaper/schema'\nimport styled from '@essex/styled-components'\nimport { ActionButton } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { useMappingPairs } from '../../../../hooks/controls/useMappingPairs.js'\nimport {\n\tuseColumnType,\n\tuseHandleDelete,\n\tuseHandleKeyChange,\n\tuseHandleValueChange,\n\tuseStepInputTable,\n} from '../../../../hooks/index.js'\nimport type { StepFormProps } from '../types.js'\nimport {\n\tuseColumnValues,\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n} from './RecodeForm.hooks.js'\n\n/**\n * Provides inputs for a RecodeStep.\n */\nexport const RecodeForm: React.FC<StepFormProps<RecodeArgs>> = memo(\n\tfunction RecodeForm({ step, workflow, input, table, onChange }) {\n\t\tconst dataTable = useStepInputTable(step, workflow, input, table)\n\t\tconst dataType = useColumnType(dataTable, step.args.column)\n\t\tconst initialValues = useColumnValues(step, dataTable)\n\t\tconst values =\n\t\t\tdataType === DataType.Date\n\t\t\t\t? initialValues.map((e) => e.toISOString())\n\t\t\t\t: initialValues\n\n\t\tconst onUpdateMapping = useCallback(\n\t\t\t(mapping: Record<Value, Value>) => {\n\t\t\t\tonChange?.({\n\t\t\t\t\t...step,\n\t\t\t\t\targs: {\n\t\t\t\t\t\t...step.args,\n\t\t\t\t\t\tmapping,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t},\n\t\t\t[onChange, step],\n\t\t)\n\n\t\tconst handleRecodeKeyChange = useHandleKeyChange(\n\t\t\tstep.args.mapping,\n\t\t\tonUpdateMapping,\n\t\t)\n\t\tconst handleRecodeValueChange = useHandleValueChange(\n\t\t\tstep.args.mapping,\n\t\t\tdataType,\n\t\t\tonUpdateMapping,\n\t\t)\n\t\tconst handleRecodeDelete = useHandleDelete(\n\t\t\tstep.args.mapping,\n\t\t\tonUpdateMapping,\n\t\t)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, values, onChange)\n\n\t\tconst columnPairs = useMappingPairs(\n\t\t\tstep.args.mapping,\n\t\t\tdataType,\n\t\t\thandleRecodeKeyChange,\n\t\t\thandleRecodeValueChange,\n\t\t\thandleRecodeDelete,\n\t\t)\n\n\t\tconst disabled = useDisabled(step, values)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<ColumnPairs>{columnPairs}</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={addIconProps}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd mapping\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\nconst ColumnPairs = styled.div`\n\tmargin-top: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst addIconProps = { iconName: 'Add' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RenameArgs } from '@datashaper/schema'\nimport type { Step } from '@datashaper/workflow'\nimport styled from '@essex/styled-components'\nimport type { IDropdownOption } from '@fluentui/react'\nimport {\n\tActionButton,\n\tIcon,\n\tIconButton,\n\tLabel,\n\tTextField,\n} from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\n\nimport { EMPTY_OBJECT } from '../../../../empty.js'\nimport {\n\tuseColumnNames,\n\tuseOnDeleteStepColumn,\n\tuseSimpleDropdownOptions,\n\tuseStepInputTable,\n} from '../../../../hooks/index.js'\nimport { TableColumnDropdown } from '../../../controls/index.js'\nimport { narrowerDropdownStyles } from '../styles.js'\nimport type { StepFormProps } from '../types.js'\nimport {\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleColumnChange,\n} from './RenameForm.hooks.js'\n\n/**\n * Provides inputs for a RenameStep.\n */\nexport const RenameForm: React.FC<StepFormProps<RenameArgs>> = memo(\n\tfunction RenameForm({ step, workflow, input, table, onChange }) {\n\t\tconst dataTable = useStepInputTable(step, workflow, input, table)\n\t\tconst handleColumnChange = useHandleColumnChange(step, onChange)\n\t\tconst handleColumnDelete = useOnDeleteStepColumn(step, onChange)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, dataTable, onChange)\n\t\tconst columnPairs = useColumnPairs(\n\t\t\tdataTable,\n\t\t\tstep,\n\t\t\thandleColumnChange,\n\t\t\thandleColumnDelete,\n\t\t)\n\t\tconst disabled = useDisabled(step, dataTable)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Label required>Column renames</Label>\n\t\t\t\t<ColumnPairs>{columnPairs}</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={addIconProps}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd rename\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useColumnPairs(\n\ttable: ColumnTable | undefined,\n\tstep: Step<RenameArgs>,\n\tonChange: (previous: string, oldName: string, newName: string) => void,\n\tonDelete: (name: string) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { columns } = step.args\n\t\treturn Object.entries(columns || EMPTY_OBJECT).map((column, index) => {\n\t\t\tconst [oldname] = column\n\t\t\treturn (\n\t\t\t\t<ColumnPair\n\t\t\t\t\tkey={`column-rename-${oldname}-${index}`}\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [table, step, onChange, onDelete])\n}\n\nconst ColumnPair: React.FC<{\n\ttable: ColumnTable | undefined\n\tcolumn: [string, string]\n\tstep: Step<RenameArgs>\n\tonChange: (previous: string, oldName: string, newName: string) => void\n\tonDelete: (name: string) => void\n}> = memo(function ColumnPair({ table, column, step, onChange, onDelete }) {\n\tconst [oldname, newname] = column\n\tconst columnFilter = (name: string) => {\n\t\tif (name === oldname) {\n\t\t\treturn true\n\t\t}\n\t\tif (step.args.columns?.[name]) {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\tconst handleColumnChange = (\n\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\topt?: IDropdownOption<any> | undefined,\n\t) => onChange(oldname, (opt?.key as string) || oldname, newname)\n\tconst handleTextChange = (\n\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\tnewValue?: string,\n\t) => {\n\t\tonChange(oldname, oldname, newValue ?? '')\n\t}\n\tconst handleDeleteClick = () => onDelete(oldname)\n\tconst columns = useColumnNames(table, columnFilter)\n\tconst options = useSimpleDropdownOptions(columns)\n\n\treturn (\n\t\t<ColumnPairContainer>\n\t\t\t<TableColumnDropdown\n\t\t\t\toptions={options}\n\t\t\t\tlabel={undefined}\n\t\t\t\tselectedKey={oldname}\n\t\t\t\tonChange={handleColumnChange}\n\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t/>\n\t\t\t<Icon\n\t\t\t\ticonName={'Forward'}\n\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t/>\n\t\t\t<TextField\n\t\t\t\tplaceholder={'New name'}\n\t\t\t\tvalue={newname}\n\t\t\t\tonChange={handleTextChange}\n\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t/>\n\t\t\t<IconButton\n\t\t\t\ttitle={'Remove this rename'}\n\t\t\t\ticonProps={deleteIconProps}\n\t\t\t\tonClick={handleDeleteClick}\n\t\t\t/>\n\t\t</ColumnPairContainer>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst ColumnPairs = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst ColumnPairContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n`\n\nconst addIconProps = { iconName: 'Add' }\nconst deleteIconProps = { iconName: 'Delete' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label } from '@fluentui/react'\n\nexport const Container = styled.div`\n\tmargin-top: 8px;\n\tmargin-left: 16px;\n`\n\nexport const Input = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n\nexport const InputLabel = styled.div`\n\twidth: 84px;\n`\n\nexport const OrLabel = styled(Label as any)`\n\tdisplay: inline;\n\tfont-style: italic;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n\tborder-left: 1px solid ${({ theme }) => theme.palette.neutralTertiaryAlt};\n`\n\nexport const spinStyles = {\n\troot: {\n\t\twidth: 120,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tInputColumnArgs,\n\tInputColumnListArgs,\n\tOutputColumnArgs,\n} from '@datashaper/schema'\nimport {\n\tisInputColumnListStep,\n\tisInputColumnStep,\n\tisOutputColumnStep,\n\tNodeInput,\n} from '@datashaper/workflow'\nimport { MultiDropdown } from '@essex/components'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\n\nimport { useColumnNames } from '../../hooks/columns/useColumnNames.js'\nimport { useSimpleDropdownOptions } from '../../hooks/fluent/useSimpleDropdownOptions.js'\nimport { useWorkflowDataTable } from '../../hooks/index.js'\nimport { TableColumnDropdown } from '../controls/TableColumnDropdown/TableColumnDropdown.js'\nimport { dropdownStyles } from '../styles.js'\nimport {\n\tgetSimpleDropdownOptions,\n\tuseColumnFilter,\n\tuseDefaultOutputNameInitially,\n\tuseInputColumnChanged,\n\tuseInputColumnListAllChanged,\n\tuseInputColumnListChanged,\n\tuseOutputColumnChanged,\n\tuseStepArgsComponent,\n\tuseStepChangeHandler,\n} from './StepForm.hooks.js'\nimport { Container } from './StepForm.styles.js'\nimport type { StepFormProps } from './StepForm.types.js'\nimport { getInputNode } from '../../util.js'\n\n/**\n * Let's us render the Steps in a loop while memoizing all the functions\n */\nexport const StepForm: React.FC<StepFormProps> = memo(function StepForm({\n\tstep: s,\n\toutput,\n\tworkflow: g,\n\tmetadata,\n\tindex,\n\tonChange,\n\tonChangeOutput: changeOutput,\n\thideInputColumn,\n}) {\n\t/* Current Table Selection */\n\tconst tableId = getInputNode(s, NodeInput.Source)\n\tconst table = useWorkflowDataTable(tableId, g)\n\n\t/* Column Options */\n\tconst columns = useColumnNames(table, useColumnFilter(s, table))\n\tconst columnOptions = useSimpleDropdownOptions(columns)\n\n\t/* The step args component */\n\tconst StepArgs = useStepArgsComponent(s)\n\n\t/* Change Events */\n\tconst change = useStepChangeHandler(index, onChange)\n\tconst onInputColumnChange = useInputColumnChanged(s, change, table)\n\tconst onInputColumnListChange = useInputColumnListChanged(s, change)\n\tconst onInputColumnListChangeAll = useInputColumnListAllChanged(s, change)\n\tconst onOutputColumnChange = useOutputColumnChanged(s, change)\n\n\t/* Side Effects */\n\tuseDefaultOutputNameInitially(s, output, changeOutput)\n\n\tconst name = useMemo(() => {\n\t\tconst parts = s.verb.split('.')\n\t\treturn parts[parts.length - 1]\n\t}, [s.verb])\n\treturn StepArgs == null ? null : (\n\t\t<Container className='step-component'>\n\t\t\t{/* Input Column List */}\n\t\t\t{isInputColumnListStep(s) ? (\n\t\t\t\t<MultiDropdown\n\t\t\t\t\trequired={true}\n\t\t\t\t\tlabel={'Columns'}\n\t\t\t\t\tplaceholder={'Choose columns'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tselectedKeys={(s.args as InputColumnListArgs).columns}\n\t\t\t\t\toptions={getSimpleDropdownOptions(columns)}\n\t\t\t\t\tonChange={onInputColumnListChange}\n\t\t\t\t\tonChangeAll={onInputColumnListChangeAll}\n\t\t\t\t/>\n\t\t\t) : null}\n\n\t\t\t{/* Input Column */}\n\t\t\t{!hideInputColumn && isInputColumnStep(s) ? (\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\trequired\n\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\tlabel={`Column to ${name}`}\n\t\t\t\t\tselectedKey={(s.args as InputColumnArgs).column}\n\t\t\t\t\tonChange={onInputColumnChange}\n\t\t\t\t/>\n\t\t\t) : null}\n\n\t\t\t<StepArgs\n\t\t\t\tstep={s}\n\t\t\t\tworkflow={g}\n\t\t\t\tmetadata={metadata}\n\t\t\t\toutput={output}\n\t\t\t\tonChangeOutput={changeOutput}\n\t\t\t\tonChange={change}\n\t\t\t/>\n\n\t\t\t{/* Output Column */}\n\t\t\t{isOutputColumnStep(s) ? (\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'New column name'}\n\t\t\t\t\tplaceholder={'Column name'}\n\t\t\t\t\tvalue={(s.args as OutputColumnArgs).to}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={onOutputColumnChange}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { FontIcon, Label, mergeStyles } from '@fluentui/react'\n\nexport const iconClass = mergeStyles({\n\tfontSize: 20,\n\theight: 20,\n\twidth: 20,\n})\n\nexport const Container = styled.div`\n\tdisplay: inline;\n`\n\nexport const CalendarContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const CalendarButton = styled(FontIcon as any)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 4px;\n`\n\nexport const CalendarLabel = styled(Label as any)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 3px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tCalendar,\n\tCallout,\n\tdefaultCalendarStrings,\n\tDirectionalHint,\n\tFocusTrapZone,\n\tuseTheme,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo, useCallback, useMemo, useRef, useState } from 'react'\n\nimport type { CalendarPickerProps } from '../CalendarPicker/index.js'\nimport {\n\tCalendarButton,\n\tCalendarContainer,\n\tCalendarLabel,\n\tContainer,\n\ticonClass,\n} from './CalendarPicker.styles.js'\n\nexport const CalendarPicker: React.FC<CalendarPickerProps> = memo(\n\tfunction CalendarPicker({ onSelectDate, value, disabled, cleanLabel }) {\n\t\tconst [selectedDate, setSelectedDate] = useState<Date>(value ?? new Date())\n\t\tconst [\n\t\t\tshowCalendar,\n\t\t\t{ toggle: toggleShowCalendar, setFalse: hideCalendar },\n\t\t] = useBoolean(false)\n\t\tconst buttonContainerRef = useRef<HTMLDivElement>(null)\n\n\t\tconst onSelectDateChange = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tsetSelectedDate(date)\n\t\t\t\thideCalendar()\n\t\t\t},\n\t\t\t[hideCalendar],\n\t\t)\n\n\t\tconst theme = useTheme()\n\t\tconst iconColors = useMemo(\n\t\t\t() => ({\n\t\t\t\tdisabled: theme.palette.neutralTertiary,\n\t\t\t\tenabled: theme.palette.neutralPrimary,\n\t\t\t}),\n\t\t\t[theme],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CalendarContainer ref={buttonContainerRef}>\n\t\t\t\t\t<CalendarButton\n\t\t\t\t\t\taria-label='Compass'\n\t\t\t\t\t\ticonName='Calendar'\n\t\t\t\t\t\tclassName={iconClass}\n\t\t\t\t\t\tonClick={!disabled ? toggleShowCalendar : undefined}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t? { cursor: 'default', color: iconColors.disabled }\n\t\t\t\t\t\t\t\t: { cursor: 'pointer', color: iconColors.enabled }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{selectedDate != null && !cleanLabel ? (\n\t\t\t\t\t\t<CalendarLabel>\n\t\t\t\t\t\t\t{!cleanLabel ? selectedDate?.toLocaleDateString() : ''}\n\t\t\t\t\t\t</CalendarLabel>\n\t\t\t\t\t) : null}\n\t\t\t\t</CalendarContainer>\n\t\t\t\t{showCalendar && (\n\t\t\t\t\t<Callout\n\t\t\t\t\t\tisBeakVisible={false}\n\t\t\t\t\t\tgapSpace={0}\n\t\t\t\t\t\tdoNotLayer={false}\n\t\t\t\t\t\ttarget={buttonContainerRef}\n\t\t\t\t\t\tdirectionalHint={DirectionalHint.bottomLeftEdge}\n\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\tsetInitialFocus\n\t\t\t\t\t>\n\t\t\t\t\t\t<FocusTrapZone isClickableOutsideFocusTrap>\n\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\t\t\tshowMonthPickerAsOverlay\n\t\t\t\t\t\t\t\thighlightSelectedMonth\n\t\t\t\t\t\t\t\tshowGoToToday={false}\n\t\t\t\t\t\t\t\tonSelectDate={(date: Date) => {\n\t\t\t\t\t\t\t\t\tonSelectDate(date)\n\t\t\t\t\t\t\t\t\tonSelectDateChange(date)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\t// Calendar uses English strings by default. For localized apps, you must override this prop.\n\t\t\t\t\t\t\t\tstrings={defaultCalendarStrings}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FocusTrapZone>\n\t\t\t\t\t</Callout>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label, TextField } from '@fluentui/react'\n\nimport { narrowDropdownStyles } from '../styles.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const leftStyles = {\n\troot: {\n\t\t...narrowDropdownStyles.root,\n\t\tmarginRight: 12,\n\t},\n}\n\nexport const TextValue = styled(TextField as any)`\n\tdisplay: inline;\n`\n\nexport const OrLabel = styled(Label as any)`\n\tdisplay: inline;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DataType } from '@datashaper/schema'\nimport { coerce } from '@datashaper/tables'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { Dropdown, mergeStyleSets, SpinButton } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { CalendarPicker } from '../../../controls/index.js'\nimport { narrowerDropdownStyles } from '../styles.js'\nimport { Container, TextValue } from './DataTypeField.styles.js'\nimport type { DataTypeFieldProps } from './DataTypeField.types.js'\n\nexport const DataTypeField: React.FC<DataTypeFieldProps> = memo(\n\tfunction DataTypeField({\n\t\tdataType,\n\t\tkeyValue,\n\t\tvalue,\n\t\tplaceholder,\n\t\tonKeyChange,\n\t\tonValueChange,\n\t\tisKey,\n\t\tdropdownStyles,\n\t\tdisabled,\n\t}) {\n\t\tconst booleanOptions: IDropdownOption[] = [\n\t\t\t{ key: 'true', text: 'true' },\n\t\t\t{ key: 'false', text: 'false' },\n\t\t]\n\n\t\tconst styles = mergeStyleSets(narrowerDropdownStyles, dropdownStyles)\n\t\tconst onSelectDate = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tconst val = coerce(date, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(\n\t\t\t\t\t\t\tnew Date(value).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t\t\t: onValueChange(\n\t\t\t\t\t\t\tnew Date(keyValue).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst onChangeTextFieldValue = useCallback(\n\t\t\t(\n\t\t\t\t_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(value.toString(), val.toString())\n\t\t\t\t\t: onValueChange(keyValue, val)\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst spinButtonOnChange = useCallback(\n\t\t\t(_event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n\t\t\t\tif (newValue != null) {\n\t\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\t\tisKey ? onKeyChange(value, val) : onValueChange(keyValue, val)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst dropDownOnChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\t\t\tnewValue?: IDropdownOption<any> | undefined,\n\t\t\t) => {\n\t\t\t\tif (newValue != null) {\n\t\t\t\t\tisKey\n\t\t\t\t\t\t? onKeyChange(value, newValue.key)\n\t\t\t\t\t\t: onValueChange(keyValue, newValue.key === 'true' ? true : false)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, isKey, value, keyValue],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{dataType === DataType.Date ? (\n\t\t\t\t\t<CalendarPicker\n\t\t\t\t\t\tonSelectDate={onSelectDate}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.String ? (\n\t\t\t\t\t<TextValue\n\t\t\t\t\t\tonChange={onChangeTextFieldValue}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{dataType === DataType.Number ? (\n\t\t\t\t\t<SpinButton\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tonChange={spinButtonOnChange}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.Boolean ? (\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tselectedKey={value.toString()}\n\t\t\t\t\t\toptions={booleanOptions}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tonChange={dropDownOnChange}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n"],"names":[],"sourceRoot":""}