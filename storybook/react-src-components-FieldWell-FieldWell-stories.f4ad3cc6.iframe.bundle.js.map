{"version":3,"file":"react-src-components-FieldWell-FieldWell-stories.f4ad3cc6.iframe.bundle.js","mappings":";;;;;;AAsBA;;;AAGA;AAGA;AACA;;AAEA;;AAIA;;;;;;AAMA;AACA;AACA;;;ACvBA","sources":["webpack://@datashaper/stories/../react/src/components/FieldWell/FieldWell.styles.ts","webpack://@datashaper/stories/../react/src/components/FieldWell/FieldWell.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useDropdownProps } from '@essex/components'\nimport type {\n\tIButtonProps,\n\tIDropdownProps,\n\tIDropdownStyles,\n} from '@fluentui/react'\nimport { merge, useTheme } from '@fluentui/react'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport type { FieldWellStyles } from './FieldWell.types.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 2px;\n\tpadding: 0;\n`\n\nexport const Title = styled.div`\n\tdisplay: flex;\t\n\tfont-size: 0.8em;\n\tcolor: ${({ theme }) => theme.palette.neutralSecondary};\n`\n\nexport const Required = styled.div<{ required?: boolean }>`\n\tcolor: ${({ theme }) => theme.palette.redDark};\n\t&:before {\n\t\tcontent: '${({ required }) => (required ? '*' : '')}';\n\t}\n`\n\nexport const Well = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n\tgap: 4px;\n\tcolor: ${({ theme }) => theme.palette.neutralSecondary};\n\tborder: 1px dotted ${({ theme }) => theme.palette.neutralTertiaryAlt};\n\tbackground: ${({ theme }) => theme.palette.neutralLighter};\n\tborder-radius: 4px;\n\tpadding: 3px 8px;\n`\n\nexport function useFieldWellStyles(\n\tstyles?: Partial<FieldWellStyles>,\n): FieldWellStyles {\n\tconst theme = useTheme()\n\treturn useMemo(\n\t\t() =>\n\t\t\tmerge(\n\t\t\t\t{\n\t\t\t\t\tdropdown: {\n\t\t\t\t\t\troot: {\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdropdown: {\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\tbackground: 'none',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ticon: {\n\t\t\t\t\t\troot: {\n\t\t\t\t\t\t\tcolor: theme.palette.neutralPrimary,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tstyles,\n\t\t\t),\n\t\t[theme, styles],\n\t)\n}\n\nexport function useFieldDropdownProps(\n\tdropdownStyles?: Partial<IDropdownStyles>,\n): Partial<IDropdownProps> {\n\tconst base = useMemo(\n\t\t() => ({\n\t\t\tstyles: merge(\n\t\t\t\t{\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdropdownStyles,\n\t\t\t),\n\t\t}),\n\t\t[dropdownStyles],\n\t)\n\treturn useDropdownProps(base, 'small')\n}\n\nexport function useResetButtonProps(disabled?: boolean): IButtonProps {\n\tconst theme = useTheme()\n\treturn useMemo(\n\t\t() => ({\n\t\t\ticonProps: {\n\t\t\t\ticonName: 'Clear',\n\t\t\t\tstyles: {\n\t\t\t\t\troot: {\n\t\t\t\t\t\t// TODO: this should be possible declaratively with fluent props for the disabled icon state\n\t\t\t\t\t\tcolor: disabled\n\t\t\t\t\t\t\t? theme.palette.neutralTertiaryAlt\n\t\t\t\t\t\t\t: theme.palette.neutralPrimary,\n\t\t\t\t\t\tfontSize: 9,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tstyles: {\n\t\t\t\troot: {\n\t\t\t\t\tborderRadius: 0,\n\t\t\t\t\tpadding: 0,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\twidth: 12,\n\t\t\t\t\theight: 12,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\t[theme, disabled],\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IDropdownOption } from '@fluentui/react'\nimport { IconButton, Icon, Dropdown } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\nimport { When } from 'react-if'\n\nimport {\n\tContainer,\n\tRequired,\n\tTitle,\n\tuseFieldDropdownProps,\n\tuseFieldWellStyles,\n\tuseResetButtonProps,\n\tWell,\n} from './FieldWell.styles.js'\nimport type { FieldWellProps } from './FieldWell.types.js'\n\nexport const FieldWell: React.FC<FieldWellProps> = memo(function FieldWell({\n\ttitle,\n\tplaceholder,\n\ticon,\n\trequired,\n\tdisabled,\n\tselectedKey,\n\toptions,\n\tonChange,\n\tonReset,\n\tstyles,\n}) {\n\tconst _styles = useFieldWellStyles(styles)\n\tconst dropdownDisabled = disabled || !options || options.length === 0\n\tconst dropdownProps = useFieldDropdownProps(_styles.dropdown)\n\n\tconst resetDisabled = selectedKey === undefined\n\tconst resetProps = useResetButtonProps(resetDisabled)\n\tconst handleChange = useCallback(\n\t\t(_e: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) =>\n\t\t\tonChange?.(option?.key as string),\n\t\t[onChange],\n\t)\n\n\treturn (\n\t\t<Container style={_styles.root}>\n\t\t\t<Title style={_styles.title}>\n\t\t\t\t{title}\n\t\t\t\t<Required required={required} style={_styles.required} />\n\t\t\t</Title>\n\t\t\t<Well style={_styles.well}>\n\t\t\t\t<Icon iconName={icon} styles={_styles.icon} />\n\t\t\t\t<Dropdown\n\t\t\t\t\tonClick={(e) => e.stopPropagation()}\n\t\t\t\t\tdisabled={dropdownDisabled}\n\t\t\t\t\toptions={options || []}\n\t\t\t\t\tplaceholder={dropdownDisabled ? '(No valid options)' : placeholder}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tselectedKey={selectedKey || null}\n\t\t\t\t\t{...dropdownProps}\n\t\t\t\t/>\n\t\t\t\t<When condition={onReset !== undefined}>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\t{...resetProps}\n\t\t\t\t\t\tdisabled={resetDisabled}\n\t\t\t\t\t\tonClick={onReset}\n\t\t\t\t\t/>\n\t\t\t\t</When>\n\t\t\t</Well>\n\t\t</Container>\n\t)\n})\n"],"names":[],"sourceRoot":""}