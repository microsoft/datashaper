{"version":3,"file":"458.838dd174.iframe.bundle.js","mappings":";;AASA;AACA;;;AAIA;;AAGA;;;;;ACXA;;;ACKA;;AAIA;;;;ACMA;;ACJA;;;;AAMA;;;;;AAOA;;;;;ACNA;;;;;;ACPA;;AAGA;AAGA;;;ACFA;;ACNA;;;;AAAA","sources":["webpack://@datashaper/stories/../react/src/components/ArqueroDetailsList/renderers/StatCell.styles.ts","webpack://@datashaper/stories/../react/src/components/ArqueroDetailsList/renderers/StatsColumnHeader.constants.ts","webpack://@datashaper/stories/../react/src/components/Codebook/CodebookStatsField/CodebookStatsField.styles.ts","webpack://@datashaper/stories/../react/src/components/Codebook/CodebookStatsField/CodebookStatsField.tsx","webpack://@datashaper/stories/../react/src/components/controls/CalendarPicker/CalendarPicker.styles.ts","webpack://@datashaper/stories/../react/src/components/controls/CalendarPicker/CalendarPicker.tsx","webpack://@datashaper/stories/../react/src/components/verbs/forms/styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/DataTypeField.styles.ts","webpack://@datashaper/stories/../react/src/components/verbs/forms/shared/DataTypeField.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nimport { STATS_HEADER_ITEM_HEIGHT } from '../ArqueroDetailsList.constants.js'\n\nexport const Container = styled.div`\n\theight: ${STATS_HEADER_ITEM_HEIGHT}px;\n\tline-height: ${STATS_HEADER_ITEM_HEIGHT}px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\nexport const Name = styled.div`\n\ttext-transform: capitalize;\n`\nexport const Value = styled.div`\n\tmax-width: '100%';\n\toverflow: 'hidden';\n\twhite-space: 'nowrap';\n\ttext-overflow: 'ellipsis';\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { StatsColumnType } from '../ArqueroDetailsList.types.js'\n\nexport const pretty: Record<string, string> = {\n\tdistinct: 'unique',\n\tinvalid: 'empty',\n}\n\nexport const DEFAULT_STATS: StatsColumnType[] = [\n\tStatsColumnType.Type,\n\tStatsColumnType.Distinct,\n\tStatsColumnType.Invalid,\n\tStatsColumnType.Min,\n\tStatsColumnType.Max,\n]\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label } from '@fluentui/react'\n\nexport const Flex = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n`\nexport const FieldName = styled(Label)`\n\tmargin: auto;\n`\n\nexport const DataDisplay = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IColumn } from '@fluentui/react'\nimport { Checkbox } from '@fluentui/react'\nimport {\n\ttype FormEvent,\n\tmemo,\n\tuseCallback,\n\tuseEffect,\n\tuseRef,\n\tuseState,\n} from 'react'\n\nimport { StatsColumnType } from '../../ArqueroDetailsList/ArqueroDetailsList.types.js'\nimport { HistogramColumnHeader } from '../../ArqueroDetailsList/renderers/HistogramColumnHeader.js'\nimport { StatsColumnHeader } from '../../ArqueroDetailsList/renderers/StatsColumnHeader.js'\nimport { DataDisplay, FieldName, Flex } from './CodebookStatsField.styles.js'\nimport type { CodebookStatsFieldProps } from './CodebookStatsField.types.js'\n\nconst DEFAULT_STATS = [\n\tStatsColumnType.Count,\n\tStatsColumnType.Min,\n\tStatsColumnType.Max,\n\tStatsColumnType.Example,\n]\n\nexport const CodebookStatsField: React.FC<CodebookStatsFieldProps> = memo(\n\tfunction CodebookStatsField(props) {\n\t\tconst {\n\t\t\tfield,\n\t\t\tmetadata,\n\t\t\tonChangeField,\n\t\t\tstyles,\n\t\t\tcheckbox,\n\t\t\thistogramColumn,\n\t\t} = props\n\t\tconst [column, setColumn] = useState(histogramColumn)\n\t\tconst wrapperRef = useRef<HTMLDivElement | null>(null)\n\n\t\tuseEffect(() => {\n\t\t\tif (!histogramColumn) {\n\t\t\t\tsetColumn({\n\t\t\t\t\tcurrentWidth:\n\t\t\t\t\t\t(wrapperRef?.current?.clientWidth || 0) -\n\t\t\t\t\t\t(Number(styles?.root?.padding || 0) * 2 ?? 0),\n\t\t\t\t} as IColumn)\n\t\t\t}\n\t\t}, [wrapperRef, histogramColumn, styles])\n\n\t\tconst onChangeValue = useCallback(\n\t\t\t(\n\t\t\t\t_?: FormEvent<HTMLElement | HTMLInputElement> | undefined,\n\t\t\t\tchecked?: boolean | undefined,\n\t\t\t) => {\n\t\t\t\tonChangeField?.({ ...field, exclude: !checked })\n\t\t\t\tcheckbox?.onChange?.(_, checked)\n\t\t\t},\n\t\t\t[onChangeField, checkbox, field],\n\t\t)\n\n\t\tconst meta = metadata?.columns?.[field.name]\n\t\treturn (\n\t\t\t<div ref={wrapperRef} style={styles?.root}>\n\t\t\t\t<Flex>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tstyles={styles?.checkbox}\n\t\t\t\t\t\tchecked={!field.exclude}\n\t\t\t\t\t\t{...checkbox}\n\t\t\t\t\t\tonChange={onChangeValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<FieldName disabled={field.exclude}>{field.name}</FieldName>\n\t\t\t\t</Flex>\n\t\t\t\t<DataDisplay>\n\t\t\t\t\t<StatsColumnHeader\n\t\t\t\t\t\tstats={DEFAULT_STATS}\n\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\tmetadata={meta}\n\t\t\t\t\t\tdisabled={field.exclude}\n\t\t\t\t\t/>\n\t\t\t\t\t<HistogramColumnHeader\n\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\tmetadata={meta}\n\t\t\t\t\t\tdisabled={field.exclude}\n\t\t\t\t\t/>\n\t\t\t\t</DataDisplay>\n\t\t\t</div>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { FontIcon, Label, mergeStyles } from '@fluentui/react'\n\nexport const iconClass = mergeStyles({\n\tfontSize: 20,\n\theight: 20,\n\twidth: 20,\n})\n\nexport const Container = styled.div`\n\tdisplay: inline;\n`\n\nexport const CalendarContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const CalendarButton = styled(FontIcon)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 4px;\n`\n\nexport const CalendarLabel = styled(Label)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 3px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tCalendar,\n\tCallout,\n\tdefaultCalendarStrings,\n\tDirectionalHint,\n\tFocusTrapZone,\n\tuseTheme,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo, useCallback, useMemo, useRef, useState } from 'react'\n\nimport type { CalendarPickerProps } from '../CalendarPicker/index.js'\nimport {\n\tCalendarButton,\n\tCalendarContainer,\n\tCalendarLabel,\n\tContainer,\n\ticonClass,\n} from './CalendarPicker.styles.js'\n\nexport const CalendarPicker: React.FC<CalendarPickerProps> = memo(\n\tfunction CalendarPicker({ onSelectDate, value, disabled, cleanLabel }) {\n\t\tconst [selectedDate, setSelectedDate] = useState<Date>(value ?? new Date())\n\t\tconst [\n\t\t\tshowCalendar,\n\t\t\t{ toggle: toggleShowCalendar, setFalse: hideCalendar },\n\t\t] = useBoolean(false)\n\t\tconst buttonContainerRef = useRef<HTMLDivElement>(null)\n\n\t\tconst onSelectDateChange = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tsetSelectedDate(date)\n\t\t\t\thideCalendar()\n\t\t\t},\n\t\t\t[hideCalendar],\n\t\t)\n\n\t\tconst theme = useTheme()\n\t\tconst iconColors = useMemo(\n\t\t\t() => ({\n\t\t\t\tdisabled: theme.palette.neutralTertiary,\n\t\t\t\tenabled: theme.palette.neutralPrimary,\n\t\t\t}),\n\t\t\t[theme],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CalendarContainer ref={buttonContainerRef}>\n\t\t\t\t\t<CalendarButton\n\t\t\t\t\t\taria-label=\"Compass\"\n\t\t\t\t\t\ticonName=\"Calendar\"\n\t\t\t\t\t\tclassName={iconClass}\n\t\t\t\t\t\tonClick={!disabled ? toggleShowCalendar : undefined}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t? { cursor: 'default', color: iconColors.disabled }\n\t\t\t\t\t\t\t\t: { cursor: 'pointer', color: iconColors.enabled }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{selectedDate != null && !cleanLabel ? (\n\t\t\t\t\t\t<CalendarLabel>\n\t\t\t\t\t\t\t{!cleanLabel ? selectedDate?.toLocaleDateString() : ''}\n\t\t\t\t\t\t</CalendarLabel>\n\t\t\t\t\t) : null}\n\t\t\t\t</CalendarContainer>\n\t\t\t\t{showCalendar && (\n\t\t\t\t\t<Callout\n\t\t\t\t\t\tisBeakVisible={false}\n\t\t\t\t\t\tgapSpace={0}\n\t\t\t\t\t\tdoNotLayer={false}\n\t\t\t\t\t\ttarget={buttonContainerRef}\n\t\t\t\t\t\tdirectionalHint={DirectionalHint.bottomLeftEdge}\n\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\tsetInitialFocus\n\t\t\t\t\t>\n\t\t\t\t\t\t<FocusTrapZone isClickableOutsideFocusTrap>\n\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\t\t\tshowMonthPickerAsOverlay\n\t\t\t\t\t\t\t\thighlightSelectedMonth\n\t\t\t\t\t\t\t\tshowGoToToday={false}\n\t\t\t\t\t\t\t\tonSelectDate={(date: Date) => {\n\t\t\t\t\t\t\t\t\tonSelectDate(date)\n\t\t\t\t\t\t\t\t\tonSelectDateChange(date)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\t// Calendar uses English strings by default. For localized apps, you must override this prop.\n\t\t\t\t\t\t\t\tstrings={defaultCalendarStrings}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FocusTrapZone>\n\t\t\t\t\t</Callout>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nexport { dropdownStyles, narrowDropdownStyles } from '../../styles.js'\n\nexport const LeftAlignedRow = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n`\n\n/**\n * For explanatory text below an input,\n */\nexport const InputExplainer = styled.div`\n\tfont-size: 0.85em;\n\tcolor: ${({ theme }) => theme.palette.neutralSecondary};\n`\n\nexport const checkboxStyles = {\n\troot: {\n\t\twidth: 220,\n\t\tpaddingTop: '10px',\n\t},\n}\n\n/**\n * For very narrow side-by-sides with a delete button for example\n */\nexport const narrowerDropdownStyles = {\n\troot: {\n\t\twidth: 99,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label, TextField } from '@fluentui/react'\n\nimport { narrowDropdownStyles } from '../styles.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const leftStyles = {\n\troot: {\n\t\t...narrowDropdownStyles.root,\n\t\tmarginRight: 12,\n\t},\n}\n\nexport const TextValue = styled(TextField)`\n\tdisplay: inline;\n`\n\nexport const OrLabel = styled(Label)`\n\tdisplay: inline;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DataType } from '@datashaper/schema'\nimport { coerce } from '@datashaper/tables'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { Dropdown, mergeStyleSets, SpinButton } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { CalendarPicker } from '../../../controls/index.js'\nimport { narrowerDropdownStyles } from '../styles.js'\nimport { Container, TextValue } from './DataTypeField.styles.js'\nimport type { DataTypeFieldProps } from './DataTypeField.types.js'\n\nexport const DataTypeField: React.FC<DataTypeFieldProps> = memo(\n\tfunction DataTypeField({\n\t\tdataType,\n\t\tkeyValue,\n\t\tvalue,\n\t\tplaceholder,\n\t\tonKeyChange,\n\t\tonValueChange,\n\t\tisKey,\n\t\tdropdownStyles,\n\t\tdisabled,\n\t}) {\n\t\tconst booleanOptions: IDropdownOption[] = [\n\t\t\t{ key: 'true', text: 'true' },\n\t\t\t{ key: 'false', text: 'false' },\n\t\t]\n\n\t\tconst styles = mergeStyleSets(narrowerDropdownStyles, dropdownStyles)\n\t\tconst onSelectDate = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tconst val = coerce(date, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(\n\t\t\t\t\t\t\tnew Date(value).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t\t\t: onValueChange(\n\t\t\t\t\t\t\tnew Date(keyValue).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst onChangeTextFieldValue = useCallback(\n\t\t\t(\n\t\t\t\t_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(value.toString(), val.toString())\n\t\t\t\t\t: onValueChange(keyValue, val)\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst spinButtonOnChange = useCallback(\n\t\t\t(_event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n\t\t\t\tif (newValue != null) {\n\t\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\t\tisKey ? onKeyChange(value, val) : onValueChange(keyValue, val)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst dropDownOnChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\t\t\tnewValue?: IDropdownOption<any> | undefined,\n\t\t\t) => {\n\t\t\t\tif (newValue != null) {\n\t\t\t\t\tisKey\n\t\t\t\t\t\t? onKeyChange(value, newValue.key)\n\t\t\t\t\t\t: onValueChange(keyValue, newValue.key === 'true' ? true : false)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, isKey, value, keyValue],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{dataType === DataType.Date ? (\n\t\t\t\t\t<CalendarPicker\n\t\t\t\t\t\tonSelectDate={onSelectDate}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.String ? (\n\t\t\t\t\t<TextValue\n\t\t\t\t\t\tonChange={onChangeTextFieldValue}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{dataType === DataType.Number ? (\n\t\t\t\t\t<SpinButton\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tonChange={spinButtonOnChange}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.Boolean ? (\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tselectedKey={value.toString()}\n\t\t\t\t\t\toptions={booleanOptions}\n\t\t\t\t\t\tstyles={styles}\n\t\t\t\t\t\tonChange={dropDownOnChange}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n"],"names":[],"sourceRoot":""}